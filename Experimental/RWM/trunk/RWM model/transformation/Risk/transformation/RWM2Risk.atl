-- @atlcompiler atl2006
module RWM2Risk; -- Module Template
create OUT : RWM from IN : RWM;

------------------------------
------------------------------

helper context RWM!Goal def : priorityAsDouble : Real = 
    if (self.priority = #VeryHigh) then
      4.0
    else if (self.priority = #High) then
      3.0
    else if (self.priority = #Normal) then
      2.0
    else if (self.priority = #Low) then
      1.0
    else if (self.priority = #VeryLow) then
      0.0
    else
      2.0 --By default
	endif endif endif endif endif;

helper def : maxPriority() : Integer = 4;

--Goal coefficient
helper def : unitary_coeff() : Real = 1.0;
helper def : parent_coeff() : Real = 1.0;
helper def : child_coeff() : Real = 0.5;

--Information system coefficient
helper def : si_create_coeff() : Real = 0.5;
helper def : si_read_coeff() : Real = 1.0;
helper def : si_update_coeff() : Real = 1.0;
helper def : si_delete_coeff() : Real = 0.5;

helper context RWM!Goal def : getAllSubGoals() : Sequence(RWM!Goal) =
	Sequence{self}->union(self.subgoals->collect(goal | goal.getAllSubGoals())->flatten());

helper context RWM!Goal def : parent() : RWM!Goal =
    self.eContainer();

helper context RWM!Goal def : entitiesByGoal() : Sequence(RWM!Entity) =
    self.getAllSubGoals()->flatten()->collect(goal | goal.privilegeGroup)->select(elt | elt <> OclUndefined)->collect(pGroup | pGroup.privileges)->flatten()->collect(p | p.element)->asSet()->select(e | e.oclIsTypeOf(RWM!Entity));

helper context RWM!Goal def : attributesByGoal() : Sequence(RWM!Attribute) =
    self.getAllSubGoals()->flatten()->collect(goal | goal.privilegeGroup)->select(elt | elt <> OclUndefined)->collect(pGroup | pGroup.privileges)->flatten()->collect(p | p.element)->asSet()->select(e | e.oclIsTypeOf(RWM!Attribute));

helper context RWM!Goal def : unitaryRiskV1 : Real =
    self.priorityAsDouble / thisModule.maxPriority();

helper context RWM!Goal def : unitaryRiskV2 : Real =
    let couv : Real =
        ((self.entitiesByGoal().size() / RWM!Entity->allInstances()->size()) + (self.attributesByGoal().size() / RWM!Attribute->allInstances()->size()))*0.5
    in
    	0.5*(couv + self.unitaryRiskV1);

helper context RWM!BasicElement def : getPrivileges(nature : RWM!PrivilegeNature) : Sequence(RWM!Privilege) =
    RWM!Privilege->allInstances()->select(p | p.element=self and p.category = nature);

helper def : getPrivileges(nature : RWM!PrivilegeNature, type : OclType) : Sequence(RWM!Privilege) =
    RWM!Privilege->allInstances()->select(p | p.category = nature and p.element.oclIsTypeOf(type));

helper context RWM!Entity def : risk : Real =
    let rge : Real =
		thisModule.getPrivileges(#"create",RWM!Entity)->size()*thisModule.si_create_coeff() + 
		thisModule.getPrivileges(#read,RWM!Entity)->size()*thisModule.si_read_coeff() +
		thisModule.getPrivileges(#update,RWM!Entity)->size()*thisModule.si_update_coeff() +
		thisModule.getPrivileges(#delete,RWM!Entity)->size()*thisModule.si_delete_coeff()
	in
	let re : Real =
		self.getPrivileges(#"create")->size()*thisModule.si_create_coeff() + 
		self.getPrivileges(#read)->size()*thisModule.si_read_coeff() +
		self.getPrivileges(#update)->size()*thisModule.si_update_coeff() +
		self.getPrivileges(#delete)->size()*thisModule.si_delete_coeff()
	in
	let rga : Real =
		thisModule.getPrivileges(#"create",RWM!Attribute)->size()*thisModule.si_create_coeff() + 
		thisModule.getPrivileges(#read,RWM!Attribute)->size()*thisModule.si_read_coeff() +
		thisModule.getPrivileges(#update,RWM!Attribute)->size()*thisModule.si_update_coeff() +
		thisModule.getPrivileges(#delete,RWM!Attribute)->size()*thisModule.si_delete_coeff()
	in
	let raset : Sequence(Real) =
	    self.attributes->collect( a | 
    		a.getPrivileges(#"create")->size()*thisModule.si_create_coeff() + 
    		a.getPrivileges(#read)->size()*thisModule.si_read_coeff() +
    		a.getPrivileges(#update)->size()*thisModule.si_update_coeff() +
    		a.getPrivileges(#delete)->size()*thisModule.si_delete_coeff()
		)
	in    
    if (raset->size() = 0) then
		re / rge
    else
        (re * raset->sum()) / (rge * rga)
     endif;
		
helper context RWM!Agent def : risk : Real =
    let allGoals : Sequence(RWM!Goal) =
        self.isResponsible->collect(g | g.getAllSubGoals())->flatten()->asSet()
    in
    	allGoals.size() / RWM!Goal->allInstances()->size();
    
------------------------------
------------------------------

helper def : riskStereotype : RWM!"rwm::rwm_extended::Stereotype" = OclUndefined;
helper def : riskComputedValue : RWM!"rwm::rwm_extended::Property" = OclUndefined; 

entrypoint rule stereotypes() {
    to risk : RWM!"rwm::rwm_extended::Stereotype" (
        name <- 'Risk',
        properties <- Sequence{computedValue}
    ),
    computedValue : RWM!"rwm::rwm_extended::Property" (
        name <- 'computedValue'
    )
    do {
        thisModule.riskStereotype <- risk;
        thisModule.riskComputedValue <- computedValue;
    }
}

rule reqDefs {
    from s : RWM!RequirementsDefinition
    to t : RWM!RequirementsDefinition (
        goals <- s.goals,
        entities <- s.entities,
        members <- s.members,
        relations <- s.relations,
        stereotypes <- RWM!"rwm::rwm_extended::Stereotype"->allInstances(),
        width <- 
            	let
            		max_set : Sequence(Integer) = RWM!VisualElement->allInstances()->collect(el | el.x + el.width)->asSet()
            	in
            	let 
            		max : Integer = max_set->select(v | max_set->select(v2 | v2 > v)->size() = 0)->first()
                in
                  max+10,
       height <- 
            	let
            		max_set : Sequence(Integer) = RWM!VisualElement->allInstances()->collect(el | el.y + el.height)->asSet()
            	in
            	let 
            		max : Integer = max_set->select(v | max_set->select(v2 | v2 > v)->size() = 0)->first()
                in
                  max+10
    )
}

rule goal {
    from s : RWM!Goal
    to t : RWM!Goal (
        name <- s.name,
        subgoals <- s.subgoals,
        stereotypeInstanciation <- inst,
        privilegeGroup <- s.privilegeGroup,
        x <- s.x,
        y <- s.y,
        width <- s.width,
        height <- s.height
    ),
    inst : RWM!"rwm::rwm_extended::StereotypeInstanciation" (
        "def" <- thisModule.riskStereotype,
        properties <- Sequence{computedValue}
    ),
    computedValue : RWM!"rwm::rwm_extended::PropertyInstanciation" (
        value <- s.unitaryRiskV2->toString(),
        "def" <- thisModule.riskComputedValue
    )
}

rule privilegeGroup {
    from s : RWM!PrivilegeGroup
    to t : RWM!PrivilegeGroup (
        entryPoint <- s.entryPoint
    )
}

rule entity {
    from s : RWM!Entity
    to t : RWM!Entity (
        stereotypeInstanciation <- inst,
        name <- s.name,
        attributes <- s.attributes,
        x <- s.x,
        y <- s.y,
        width <- s.width,
        height <- s.height
    ),
    inst : RWM!"rwm::rwm_extended::StereotypeInstanciation" (
        "def" <- thisModule.riskStereotype,
        properties <- Sequence{computedValue}
    ),
    computedValue : RWM!"rwm::rwm_extended::PropertyInstanciation" (
        value <- s.risk->toString(),
        "def" <- thisModule.riskComputedValue
    )
}
rule attribute {
    from s : RWM!Attribute
    to t : RWM!Attribute (
        name <- s.name,
        type <- s.type
    )
}

rule relationship {
    from s : RWM!RelationShip
    to t : RWM!RelationShip (
        ends <- s.ends
    )
}

rule ends {
	from s : RWM!End
	to t : RWM!End (
	    object <- s.object
	)
}

rule agent {
    from s : RWM!Agent
    to t : RWM!Agent (
        stereotypeInstanciation <- inst,
        name <- s.name,
        isResponsible <- s.isResponsible,
        x <- s.x,
        y <- s.y,
        width <- s.width,
        height <- s.height
    ),
    inst : RWM!"rwm::rwm_extended::StereotypeInstanciation" (
        "def" <- thisModule.riskStereotype,
        properties <- Sequence{computedValue}
    ),
    computedValue : RWM!"rwm::rwm_extended::PropertyInstanciation" (
        value <- s.risk->toString(),
        "def" <- thisModule.riskComputedValue
    )
}