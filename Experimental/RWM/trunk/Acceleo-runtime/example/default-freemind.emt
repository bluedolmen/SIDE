<?xml version="1.0" encoding="ASCII"?>
<template:ResourceSet xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:core="http://www.obeo.fr/acceleo/template/2.2.0/core" xmlns:expressions="http://www.obeo.fr/acceleo/template/2.2.0/expressions" xmlns:statements="http://www.obeo.fr/acceleo/template/2.2.0/statements" xmlns:template="http://www.obeo.fr/acceleo/template/2.2.0">
  <resources xsi:type="core:Template" name="FreeMind.toText.FreeMind" imports="//@resources.9 //@resources.8 //@resources.7 //@resources.6 //@resources.5 //@resources.4 //@resources.3 //@resources.2 //@resources.1" beginTag="&lt;%" endTag="%>">
    <scripts>
      <descriptor name="PrintArrowLink" type="Freemind.ArrowLink" description=""/>
      <statements xsi:type="statements:Text" value="&lt;arrowlink &#xA;"/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="!=">
            <operands xsi:type="expressions:CallSet">
              <calls name="startarrow" prefix=""/>
            </operands>
            <operands xsi:type="expressions:NullLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" startarrow=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="startarrow" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="!=">
            <operands xsi:type="expressions:CallSet">
              <calls name="endarrow" prefix=""/>
            </operands>
            <operands xsi:type="expressions:NullLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" endarrow=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="endarrow" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="!=">
            <operands xsi:type="expressions:CallSet">
              <calls name="startinclination" prefix=""/>
            </operands>
            <operands xsi:type="expressions:NullLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" startinclination=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="startinclination" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="!=">
            <operands xsi:type="expressions:CallSet">
              <calls name="endinclination" prefix=""/>
            </operands>
            <operands xsi:type="expressions:NullLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" endinclination=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="endinclination" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="!=">
            <operands xsi:type="expressions:CallSet">
              <calls name="destination" prefix=""/>
            </operands>
            <operands xsi:type="expressions:NullLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" destination=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="destination" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="!=">
            <operands xsi:type="expressions:CallSet">
              <calls name="color" prefix=""/>
            </operands>
            <operands xsi:type="expressions:NullLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" color=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="color" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:Text" value="/>"/>
    </scripts>
    <scripts>
      <descriptor name="PrintFont" type="Freemind.Font" description=""/>
      <statements xsi:type="statements:Text" value="&lt;font bold=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="bold" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot; italic=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="italic" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot; size=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="size" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot; name=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;/>"/>
    </scripts>
    <scripts>
      <descriptor name="Map" type="Freemind.Map" description="">
        <file>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="node" prefix=""/>
              <calls name="text" prefix=""/>
            </expression>
          </statements>
          <statements xsi:type="statements:Text" value=".mm"/>
        </file>
      </descriptor>
      <statements xsi:type="statements:Text" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?>&#xA;&lt;map version=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="version" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;>&#xA;  "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="node" prefix=""/>
          <calls name="PrintNode" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&#xA;&lt;/map>"/>
    </scripts>
    <scripts>
      <descriptor name="PrintNode" type="Freemind.Node" description=""/>
      <statements xsi:type="statements:Text" value="&lt;node text=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="text" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot; folded=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="folded" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot; "/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="!=">
            <operands xsi:type="expressions:CallSet">
              <calls name="id" prefix=""/>
            </operands>
            <operands xsi:type="expressions:NullLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="id=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="id" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:Text" value=">&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="node" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="    "/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="PrintNode" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="font" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="    "/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="PrintFont" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="arrowlink" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="    "/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="PrintArrowLink" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/node>"/>
    </scripts>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.StringServices">
    <methods name="length" return="int"/>
    <methods name="charAt" return="java.lang.String">
      <parameters type="int"/>
    </methods>
    <methods name="indexOf" return="int">
      <parameters type="java.lang.String"/>
      <parameters type="int"/>
    </methods>
    <methods name="indexOf" return="int">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="equalsIgnoreCase" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="startsWith" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="endsWith" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="lastIndexOf" return="int">
      <parameters type="java.lang.String"/>
      <parameters type="int"/>
    </methods>
    <methods name="lastIndexOf" return="int">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="substring" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
      <parameters type="int"/>
    </methods>
    <methods name="substring" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
    </methods>
    <methods name="matches" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="replaceFirst" return="java.lang.String">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="replaceAll" return="java.lang.String">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="split" return="java.util.List">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="toLowerCase" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toUpperCase" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="trim" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toU1Case" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toL1Case" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="indentSpace" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="indentTab" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.EObjectServices">
    <methods name="load" return="org.eclipse.emf.ecore.EObject">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getRootContainer" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eClass" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eContents" return="org.eclipse.emf.common.util.EList"/>
    <methods name="eResource" return="java.lang.String"/>
    <methods name="eContainer" return="org.eclipse.emf.ecore.EObject">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="eContainer" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eContainingFeature" return="org.eclipse.emf.ecore.EStructuralFeature"/>
    <methods name="eContainmentFeature" return="org.eclipse.emf.ecore.EReference"/>
    <methods name="eAllContents" return="fr.obeo.acceleo.gen.template.eval.ENodeList">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="eAllContents" return="fr.obeo.acceleo.gen.template.eval.ENodeList"/>
    <methods name="eCrossReferences" return="java.util.List"/>
    <methods name="eResourceName" return="java.lang.String"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.XpathServices">
    <methods name="parent" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="child" return="java.util.List"/>
    <methods name="self" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="ancestor" return="java.util.List"/>
    <methods name="following" return="java.util.List"/>
    <methods name="preceding" return="java.util.List"/>
    <methods name="descendant" return="java.util.List"/>
    <methods name="precedingSibling" return="java.util.List"/>
    <methods name="followingSibling" return="java.util.List"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ResourceServices">
    <methods name="getFileContent" return="java.lang.String">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ContextServices">
    <methods name="get" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="put" return="void">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="push" return="void"/>
    <methods name="pop" return="void"/>
    <methods name="peek" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="nPut" return="void">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nPush" return="void"/>
    <methods name="nPop" return="void"/>
    <methods name="nPeek" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ENodeServices">
    <methods name="toString" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="cast" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="debug" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="reverse" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sort" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sort" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="current" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="current" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="filter" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="adapt" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nSize" return="int"/>
    <methods name="sep" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="trace" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="trace" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="minimize" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sepStr" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="until" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
    </methods>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
      <parameters type="int"/>
    </methods>
    <methods name="nFirst" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nLast" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nSort" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nSort" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nMinimize" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nReverse" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nContains" return="boolean">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.RequestServices">
    <methods name="delete" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="delete" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="select" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="select" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="evaluate" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.PropertiesServices">
    <methods name="getProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getBestProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Metamodel" name="http://freemind.sourceforge.net/"/>
</template:ResourceSet>
