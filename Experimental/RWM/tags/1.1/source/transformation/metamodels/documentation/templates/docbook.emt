<?xml version="1.0" encoding="ASCII"?>
<template:ResourceSet xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:core="http://www.obeo.fr/acceleo/template/2.2.0/core" xmlns:expressions="http://www.obeo.fr/acceleo/template/2.2.0/expressions" xmlns:statements="http://www.obeo.fr/acceleo/template/2.2.0/statements" xmlns:template="http://www.obeo.fr/acceleo/template/2.2.0">
  <resources xsi:type="core:Template" name="documentation.templates.documentation" imports="//@resources.9 //@resources.8 //@resources.7 //@resources.6 //@resources.5 //@resources.4 //@resources.3 //@resources.2 //@resources.1" beginTag="&lt;%" endTag="%>">
    <scripts>
      <descriptor name="Documentation" type="Documentation.Book" description="">
        <file>
          <statements xsi:type="statements:Text" value="docbook_out.xml"/>
        </file>
      </descriptor>
      <statements xsi:type="statements:Text" value="&lt;?xml version='1.0' encoding='iso-8859-1'?>&#xA;&lt;!DOCTYPE book PUBLIC &quot;-//OASIS//DTD DocBook XML V4.5//EN&quot; &quot;./docbook-4.5/docbookx.dtd&quot;>&#xA;&lt;book lang=&quot;fr&quot;>&#xA;  &lt;bookinfo>&#xA;    &lt;title>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="title" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/title>&#xA;  &lt;/bookinfo>&#xA;  &#xA;"/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="preface" prefix=""/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="  &lt;preface>&#xA;    &lt;title>Preface&lt;/title>&#xA;"/>
        <thenStatements xsi:type="statements:For">
          <iterator xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:CallSet">
              <calls name="preface" prefix=""/>
              <calls name="para" prefix=""/>
            </expression>
          </iterator>
          <statements xsi:type="statements:Text" value="    "/>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="Part"/>
              </calls>
              <calls name="Documentation_Part" prefix=""/>
            </expression>
          </statements>
          <statements xsi:type="statements:Text" value="  &#xA;"/>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="  &lt;/preface>&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="  &#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="content" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="    "/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="Documentation_Part" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="  &#xA;&lt;/book>"/>
    </scripts>
    <scripts>
      <descriptor name="Documentation_Chapter" type="Documentation.Chapter" description=""/>
      <statements xsi:type="statements:Text" value="&lt;chapter id=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="id" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;>&#xA;  &lt;title>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="title" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/title>&#xA;  &lt;titleabbrev id=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="id" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="_short&quot;>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="title" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/titleabbrev>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="section" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="    "/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="Documentation_Part" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/chapter>"/>
    </scripts>
    <scripts>
      <descriptor name="Documentation_Paragraph_EmphasisValue" type="Documentation.EmphasisValue" description=""/>
      <statements xsi:type="statements:Text" value="&lt;emphasis "/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="!=">
            <operands xsi:type="expressions:CallSet">
              <calls name="role" prefix=""/>
            </operands>
            <operands xsi:type="expressions:NullLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="role=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="role" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:Text" value=">"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="value" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/emphasis>"/>
    </scripts>
    <scripts>
      <descriptor name="Documentation_Paragraph_InformalTableValue" type="Documentation.InformalTableValue" description=""/>
      <statements xsi:type="statements:Text" value="&lt;informaltable>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="tgroup" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="  &lt;tgroup cols=&quot;"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cols" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&quot;>&#xA;"/>
        <statements xsi:type="statements:For">
          <iterator xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:CallSet">
              <calls name="colspec" prefix=""/>
            </expression>
          </iterator>
          <statements xsi:type="statements:Text" value="    &lt;colspec colnum=&quot;"/>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="colnum" prefix=""/>
            </expression>
          </statements>
          <statements xsi:type="statements:Text" value="&quot; colwidth=&quot;"/>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="colwidth" prefix=""/>
            </expression>
          </statements>
          <statements xsi:type="statements:Text" value="&quot;/>&#xA;"/>
        </statements>
        <statements xsi:type="statements:For">
          <iterator xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:CallSet">
              <calls name="thead" prefix=""/>
            </expression>
          </iterator>
          <statements xsi:type="statements:Text" value="      &lt;thead>&#xA;"/>
          <statements xsi:type="statements:For">
            <iterator xsi:type="expressions:Parenthesis">
              <expression xsi:type="expressions:CallSet">
                <calls name="rows" prefix=""/>
              </expression>
            </iterator>
            <statements xsi:type="statements:Text" value="        &lt;row>&#xA;"/>
            <statements xsi:type="statements:For">
              <iterator xsi:type="expressions:Parenthesis">
                <expression xsi:type="expressions:CallSet">
                  <calls name="entry" prefix=""/>
                </expression>
              </iterator>
              <statements xsi:type="statements:Text" value="            &lt;entry "/>
              <statements xsi:type="statements:If">
                <condition xsi:type="expressions:Parenthesis">
                  <expression xsi:type="expressions:Operator" operator="!=">
                    <operands xsi:type="expressions:CallSet">
                      <calls name="align" prefix=""/>
                    </operands>
                    <operands xsi:type="expressions:NullLiteral"/>
                  </expression>
                </condition>
                <thenStatements xsi:type="statements:Text" value="align=&quot;"/>
                <thenStatements xsi:type="statements:Feature">
                  <expression xsi:type="expressions:CallSet">
                    <calls name="align" prefix=""/>
                  </expression>
                </thenStatements>
                <thenStatements xsi:type="statements:Text" value="&quot;"/>
              </statements>
              <statements xsi:type="statements:Text" value=">"/>
              <statements xsi:type="statements:Feature">
                <expression xsi:type="expressions:CallSet">
                  <calls name="value" prefix=""/>
                </expression>
              </statements>
              <statements xsi:type="statements:Text" value="&lt;/entry>&#xA;"/>
            </statements>
            <statements xsi:type="statements:Text" value="        &lt;/row>&#xA;"/>
          </statements>
          <statements xsi:type="statements:Text" value="      &lt;/thead>&#xA;"/>
        </statements>
        <statements xsi:type="statements:For">
          <iterator xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:CallSet">
              <calls name="tbody" prefix=""/>
            </expression>
          </iterator>
          <statements xsi:type="statements:Text" value="      &lt;tbody>&#xA;"/>
          <statements xsi:type="statements:For">
            <iterator xsi:type="expressions:Parenthesis">
              <expression xsi:type="expressions:CallSet">
                <calls name="rows" prefix=""/>
              </expression>
            </iterator>
            <statements xsi:type="statements:Text" value="        &lt;row>&#xA;"/>
            <statements xsi:type="statements:For">
              <iterator xsi:type="expressions:Parenthesis">
                <expression xsi:type="expressions:CallSet">
                  <calls name="entry" prefix=""/>
                </expression>
              </iterator>
              <statements xsi:type="statements:Text" value="            &lt;entry "/>
              <statements xsi:type="statements:If">
                <condition xsi:type="expressions:Parenthesis">
                  <expression xsi:type="expressions:Operator" operator="!=">
                    <operands xsi:type="expressions:CallSet">
                      <calls name="align" prefix=""/>
                    </operands>
                    <operands xsi:type="expressions:NullLiteral"/>
                  </expression>
                </condition>
                <thenStatements xsi:type="statements:Text" value="align=&quot;"/>
                <thenStatements xsi:type="statements:Feature">
                  <expression xsi:type="expressions:CallSet">
                    <calls name="align" prefix=""/>
                  </expression>
                </thenStatements>
                <thenStatements xsi:type="statements:Text" value="&quot;"/>
              </statements>
              <statements xsi:type="statements:Text" value=">"/>
              <statements xsi:type="statements:Feature">
                <expression xsi:type="expressions:CallSet">
                  <calls name="value" prefix=""/>
                </expression>
              </statements>
              <statements xsi:type="statements:Text" value="&lt;/entry>&#xA;"/>
            </statements>
            <statements xsi:type="statements:Text" value="        &lt;/row>&#xA;"/>
          </statements>
          <statements xsi:type="statements:Text" value="      &lt;/tbody>&#xA;"/>
        </statements>
        <statements xsi:type="statements:Text" value="  &lt;/tgroup>&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/informaltable>"/>
    </scripts>
    <scripts>
      <descriptor name="Documentation_Paragraph_ItemizedListValue" type="Documentation.ItemizedListValue" description=""/>
      <statements xsi:type="statements:Text" value="&lt;itemizedlist mark=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="mark" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="items" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="    &lt;listitem>"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="Documentation_Paragraph" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&lt;/listitem>&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/itemizedlist>"/>
    </scripts>
    <scripts>
      <descriptor name="Documentation_Paragraph" type="Documentation.Paragraph" description=""/>
      <statements xsi:type="statements:Text" value="&lt;para>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="values" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="==">
              <operands xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
              </operands>
              <operands xsi:type="expressions:StringLiteral" value="TextualValue"/>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="      "/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="TextualValue"/>
              </calls>
              <calls name="Documentation_Paragraph_TextualValue" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&#xA;"/>
        </statements>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="==">
              <operands xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
              </operands>
              <operands xsi:type="expressions:StringLiteral" value="ItemizedListValue"/>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="      "/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ItemizedListValue"/>
              </calls>
              <calls name="Documentation_Paragraph_ItemizedListValue" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&#xA;"/>
        </statements>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="==">
              <operands xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
              </operands>
              <operands xsi:type="expressions:StringLiteral" value="EmphasisValue"/>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="      "/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="EmphasisValue"/>
              </calls>
              <calls name="Documentation_Paragraph_EmphasisValue" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&#xA;"/>
        </statements>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="==">
              <operands xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
              </operands>
              <operands xsi:type="expressions:StringLiteral" value="XRefValue"/>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="      "/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="XRefValue"/>
              </calls>
              <calls name="Documentation_Paragraph_XRefValue" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&#xA;"/>
        </statements>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="==">
              <operands xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
              </operands>
              <operands xsi:type="expressions:StringLiteral" value="InformalTableValue"/>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="      "/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="InformalTableValue"/>
              </calls>
              <calls name="Documentation_Paragraph_InformalTableValue" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&#xA;"/>
        </statements>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/para>"/>
    </scripts>
    <scripts>
      <descriptor name="Documentation_Part" type="Documentation.Part" description=""/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="==">
            <operands xsi:type="expressions:CallSet">
              <calls name="eClass" prefix=""/>
              <calls name="name" prefix=""/>
            </operands>
            <operands xsi:type="expressions:StringLiteral" value="Chapter"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="    "/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cast" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="Chapter"/>
            </calls>
            <calls name="Documentation_Chapter" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="==">
            <operands xsi:type="expressions:CallSet">
              <calls name="eClass" prefix=""/>
              <calls name="name" prefix=""/>
            </operands>
            <operands xsi:type="expressions:StringLiteral" value="Section"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="    "/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cast" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="Section"/>
            </calls>
            <calls name="Documentation_Section" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="==">
            <operands xsi:type="expressions:CallSet">
              <calls name="eClass" prefix=""/>
              <calls name="name" prefix=""/>
            </operands>
            <operands xsi:type="expressions:StringLiteral" value="Paragraph"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="    "/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cast" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="Paragraph"/>
            </calls>
            <calls name="Documentation_Paragraph" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
    </scripts>
    <scripts>
      <descriptor name="Documentation_Section" type="Documentation.Section" description=""/>
      <statements xsi:type="statements:Text" value="&lt;sect"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="level" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value=" "/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="!=">
            <operands xsi:type="expressions:CallSet">
              <calls name="id" prefix=""/>
            </operands>
            <operands xsi:type="expressions:NullLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="id=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="id" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:Text" value=">&#xA;  &lt;title>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="title" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/title>&#xA;"/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="!=">
            <operands xsi:type="expressions:CallSet">
              <calls name="id" prefix=""/>
            </operands>
            <operands xsi:type="expressions:NullLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&lt;titleabbrev id=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="id" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="_short&quot;>"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="title" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&lt;/titleabbrev>"/>
      </statements>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="para" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="    "/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="Documentation_Part" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="  &#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="section" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="    "/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="Documentation_Part" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/sect"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="level" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value=">"/>
    </scripts>
    <scripts>
      <descriptor name="Documentation_Paragraph_TextualValue" type="Documentation.TextualValue" description=""/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="value" prefix=""/>
        </expression>
      </statements>
    </scripts>
    <scripts>
      <descriptor name="Documentation_Paragraph_XRefValue" type="Documentation.XRefValue" description=""/>
      <statements xsi:type="statements:Text" value="&lt;xref linkend=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="linkend" prefix=""/>
          <calls name="id" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;/>"/>
    </scripts>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.StringServices">
    <methods name="length" return="int"/>
    <methods name="charAt" return="java.lang.String">
      <parameters type="int"/>
    </methods>
    <methods name="indexOf" return="int">
      <parameters type="java.lang.String"/>
      <parameters type="int"/>
    </methods>
    <methods name="indexOf" return="int">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="equalsIgnoreCase" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="startsWith" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="endsWith" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="lastIndexOf" return="int">
      <parameters type="java.lang.String"/>
      <parameters type="int"/>
    </methods>
    <methods name="lastIndexOf" return="int">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="substring" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
      <parameters type="int"/>
    </methods>
    <methods name="substring" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
    </methods>
    <methods name="matches" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="replaceFirst" return="java.lang.String">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="replaceAll" return="java.lang.String">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="split" return="java.util.List">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="toLowerCase" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toUpperCase" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="trim" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toU1Case" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toL1Case" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="indentSpace" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="indentTab" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.EObjectServices">
    <methods name="load" return="org.eclipse.emf.ecore.EObject">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getRootContainer" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eClass" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eContents" return="org.eclipse.emf.common.util.EList"/>
    <methods name="eResource" return="java.lang.String"/>
    <methods name="eContainer" return="org.eclipse.emf.ecore.EObject">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="eContainer" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eContainingFeature" return="org.eclipse.emf.ecore.EStructuralFeature"/>
    <methods name="eContainmentFeature" return="org.eclipse.emf.ecore.EReference"/>
    <methods name="eAllContents" return="fr.obeo.acceleo.gen.template.eval.ENodeList">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="eAllContents" return="fr.obeo.acceleo.gen.template.eval.ENodeList"/>
    <methods name="eCrossReferences" return="java.util.List"/>
    <methods name="eResourceName" return="java.lang.String"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.XpathServices">
    <methods name="parent" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="child" return="java.util.List"/>
    <methods name="self" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="ancestor" return="java.util.List"/>
    <methods name="following" return="java.util.List"/>
    <methods name="preceding" return="java.util.List"/>
    <methods name="descendant" return="java.util.List"/>
    <methods name="precedingSibling" return="java.util.List"/>
    <methods name="followingSibling" return="java.util.List"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ResourceServices">
    <methods name="getFileContent" return="java.lang.String">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ContextServices">
    <methods name="get" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="put" return="void">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="push" return="void"/>
    <methods name="pop" return="void"/>
    <methods name="peek" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="nPut" return="void">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nPush" return="void"/>
    <methods name="nPop" return="void"/>
    <methods name="nPeek" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ENodeServices">
    <methods name="toString" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="cast" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="debug" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="reverse" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sort" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sort" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="current" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="current" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="filter" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="adapt" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nSize" return="int"/>
    <methods name="sep" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="trace" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="trace" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="minimize" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sepStr" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="until" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
    </methods>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
      <parameters type="int"/>
    </methods>
    <methods name="nFirst" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nLast" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nSort" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nSort" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nMinimize" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nReverse" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nContains" return="boolean">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.RequestServices">
    <methods name="delete" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="delete" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="select" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="select" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="evaluate" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.PropertiesServices">
    <methods name="getProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getBestProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Metamodel" name="http://www.bluexml.com/rwm/documentation/1.0/"/>
</template:ResourceSet>
