-- @atlcompiler atl2006
module RWM2Measure; -- Module Template
create OUT : SVG from IN : RWM;

helper def : svg : SVG!Svg = OclUndefined;

rule RequirementsDefinition {
    from s : RWM!RequirementsDefinition
    to t : SVG!Svg (
            namespace <- 'http://www.w3.org/2000/svg',
            version <- '1.1',
            baseProfile <- 'full',
            width <- 
            	let
            		max_set : Sequence(Integer) = RWM!VisualElement->allInstances()->collect(el | el.x + el.width)->asSet()
            	in
            	let 
            		max : Integer = max_set->select(v | max_set->select(v2 | v2 > v)->size() = 0)->first()
                in
                  (max+10)->toString() + 'px',
            height <- 
            	let
            		max_set : Sequence(Integer) = RWM!VisualElement->allInstances()->collect(el | el.y + el.height)->asSet()
            	in
            	let 
            		max : Integer = max_set->select(v | max_set->select(v2 | v2 > v)->size() = 0)->first()
                in
                  (max+10)->toString() + 'px'
        )
        do {
            thisModule.svg <- t;
        }
}

rule Goal {
    from s : RWM!Goal
    to t : SVG!Rect (
		root <- thisModule.svg,
		position <- t_p,
		size <- t_s,
		stroke <- 'stroke-width:1;stroke:rgb(0,0,0);',
		fill <- 'fill:rgb(169,201,236);'
    ),
    t_p : SVG!Coordinates (
        x <- s.x,
        y <- s.y
    ),
    t_s : SVG!Dimension (
        width <- s.width,
        height <- s.height
    ),
    t_text : SVG!Text (
		root <- thisModule.svg,
		position <- t_text_p,
		content <- s.name,
		fontSize <- '10px',
		textAlign <- 'center'
    ),
    t_text_p : SVG!Coordinates (
        x <- s.x + s.width/2,
        y <- s.y + s.height/2 + 5
    )
}

rule ChildGoal extends Goal {
    from s : RWM!Goal (RWM!Goal->allInstances()->select(g | g.subgoals->includes(s))->size() > 0)
    to p : SVG!Path (
		root <- thisModule.svg,
		d <-
			let parent : RWM!Goal =  RWM!Goal->allInstances()->select(g | g.subgoals->includes(s))->first()
			in
			let x_start : Integer = parent.x + parent.width/2 in
			let y_start : Integer = parent.y + parent.height/2 in
			let x_end : Integer = s.x + s.width/2 in
			let y_end : Integer = s.y + s.height/2 in
				'M ' + x_start.toString()+ ',' +y_start.toString() + ' L ' + x_end.toString() + ',' + y_end.toString()
    )
}