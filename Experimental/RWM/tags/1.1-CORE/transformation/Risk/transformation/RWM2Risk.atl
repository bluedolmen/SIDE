-- @atlcompiler atl2006
module RWM2Risk; -- Module Template
create OUT : RWM from IN : RWM;

------------------------------
------------------------------

helper context RWM!Goal def : priorityAsDouble : Real = 
    if (self.priority = #VeryHigh) then
      4.0
    else if (self.priority = #High) then
      3.0
    else if (self.priority = #Normal) then
      2.0
    else if (self.priority = #Low) then
      1.0
    else if (self.priority = #VeryLow) then
      0.0
    else
      2.0 --By default
	endif endif endif endif endif;

helper def : maxPriority() : Integer = 4;
helper def : unitary_coeff() : Real = 1.0; 
helper def : parent_coeff() : Integer = 1.0; 
helper def : child_coeff() : Integer = 0.5; 

helper context RWM!Goal def : getAllSubGoals() : Sequence(RWM!Goal) =
	Sequence{self}->union(self.subgoals->collect(goal | goal.getAllSubGoals())->flatten());

helper context RWM!Goal def : parent() : RWM!Goal =
    self.eContainer();

helper context RWM!Goal def : entitiesByGoal() : Sequence(RWM!Entity) =
    self.getAllSubGoals()->flatten()->collect(goal | goal.privilegeGroup)->select(elt | elt <> OclUndefined)->collect(pGroup | pGroup.privileges)->flatten()->collect(p | p.element)->asSet()->select(e | e.oclIsTypeOf(RWM!Entity));

helper context RWM!Goal def : attributesByGoal() : Sequence(RWM!Attribute) =
    self.getAllSubGoals()->flatten()->collect(goal | goal.privilegeGroup)->select(elt | elt <> OclUndefined)->collect(pGroup | pGroup.privileges)->flatten()->collect(p | p.element)->asSet()->select(e | e.oclIsTypeOf(RWM!Attribute));

helper context RWM!Goal def : unitaryRiskV1 : Real =
    self.priorityAsDouble / thisModule.maxPriority();

helper context RWM!Goal def : unitaryRiskV2 : Real =
    let couv : Real =
        ((self.entitiesByGoal().size() / RWM!Entity->allInstances()->size()) + (self.attributesByGoal().size() / RWM!Attribute->allInstances()->size()))*0.5
    in
    	0.5*(couv + self.unitaryRiskV1);

------------------------------
------------------------------

helper def : riskStereotype : RWM!"rwm::rwm_extended::Stereotype" = OclUndefined;
helper def : riskInitialValue : RWM!"rwm::rwm_extended::Property" = OclUndefined; 
helper def : riskComputedValue : RWM!"rwm::rwm_extended::Property" = OclUndefined; 

entrypoint rule stereotypes() {
    to risk : RWM!"rwm::rwm_extended::Stereotype" (
        name <- 'Risk',
        properties <- Sequence{initialValue, computedValue}
    ),
    initialValue : RWM!"rwm::rwm_extended::Property" (
        name <- 'initialValue'
    ),
    computedValue : RWM!"rwm::rwm_extended::Property" (
        name <- 'computedValue'
    )
    do {
        thisModule.riskStereotype <- risk;
        thisModule.riskInitialValue <- initialValue;
        thisModule.riskComputedValue <- computedValue;
    }
}

rule reqDefs {
    from s : RWM!RequirementsDefinition
    to t : RWM!RequirementsDefinition (
        goals <- s.goals,
        stereotypes <- RWM!"rwm::rwm_extended::Stereotype"->allInstances(),
        width <- 
            	let
            		max_set : Sequence(Integer) = RWM!VisualElement->allInstances()->collect(el | el.x + el.width)->asSet()
            	in
            	let 
            		max : Integer = max_set->select(v | max_set->select(v2 | v2 > v)->size() = 0)->first()
                in
                  max+10,
       height <- 
            	let
            		max_set : Sequence(Integer) = RWM!VisualElement->allInstances()->collect(el | el.y + el.height)->asSet()
            	in
            	let 
            		max : Integer = max_set->select(v | max_set->select(v2 | v2 > v)->size() = 0)->first()
                in
                  max+10
    )
}

rule goal {
    from s : RWM!Goal
    to t : RWM!Goal (
        name <- s.name,
        subgoals <- s.subgoals,
        stereotypeInstanciation <- inst,
        x <- s.x,
        y <- s.y,
        width <- s.width,
        height <- s.height
    ),
    inst : RWM!"rwm::rwm_extended::StereotypeInstanciation" (
        "def" <- thisModule.riskStereotype,
        properties <- Sequence{initialValue, computedValue}
    ),
    initialValue : RWM!"rwm::rwm_extended::PropertyInstanciation" (
        value <- s.unitaryRiskV1->toString(),
        "def" <- thisModule.riskInitialValue
    ),
    computedValue : RWM!"rwm::rwm_extended::PropertyInstanciation" (
        value <- s.unitaryRiskV2->toString(),
        "def" <- thisModule.riskComputedValue
    )
}