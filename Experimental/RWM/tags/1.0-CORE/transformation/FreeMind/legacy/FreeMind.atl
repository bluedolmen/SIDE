-- @atlcompiler atl2006
module FreeMind; -- Module Template
create OUT : XML from IN : RWM;

rule definition {
  from s: RWM!RequirementsDefinition
  to t: XML!Root (
	  name <- 'map',
	  children <- Sequence{definition}
  	),
	definition: XML!Element (
	  name <- 'node',
	  children <- Sequence{s.goals,id,text,s.members,s.entities}
	),
	id: XML!Attribute (
	  name <- 'id',
	  value <- s.__xmiID__
	),
	text: XML!Attribute (
	  name <- 'text',
	  value <- s.name
	)
}

rule goal {
  from s: RWM!Goal
  to t: XML!Element (
	  name <- 'node',
	  children <- Sequence{id,text,icon,folded,s.subgoals,doc}
  	),
	id: XML!Attribute (
	  name <- 'id',
	  value <- s.__xmiID__
	),
	text: XML!Attribute (
	  name <- 'text',
	  value <- s.name
	),
	folded: XML!Attribute (
	  name <- 'folded',
	  value <- 'true'
	),
	icon: XML!Element (
	  name<-'icon',
	  children <- Sequence{bookmark}
	),
	bookmark: XML!Attribute(
	  name <-'BUILTIN',
	  value <- 'bookmark'
	),
	doc: XML!Element (
	  name <- 'node',
	  children <- Sequence{docid,doctext,docicon}
	),
	docid: XML!Attribute (
	  name <- 'id',
	  value <- 'doc'+s.__xmiID__
	),
	doctext: XML!Attribute (
	  name <- 'text',
	  value <- s.documentation
	),
	docicon: XML!Element (
	  name<-'icon',
	  children <- Sequence{attach}
	),
	attach: XML!Attribute(
	  name <-'BUILTIN',
	  value <- 'attach'
	)
}

rule goal_with_responsible extends goal {
  from s: RWM!Goal(not(s.responsible->first()->oclIsUndefined()))
  to t: XML!Element (
  	  children <- Sequence{id,text,icon,folded,s.subgoals,doc,link}
  	),
	link: XML!Element (
	  name <- 'arrowlink',
	  children <- Sequence{destination,source,startarrow,endarrow,color}
	),
	destination: XML!Attribute (
	  name <- 'destination',
	  value <- s.responsible->first().__xmiID__
	),
	source: XML!Attribute (
	  name <- 'source',
	  value <- s.__xmiID__
	),
	startarrow: XML!Attribute (
	  name <- 'startarrow',
	  value <- 'default'
	),
	endarrow: XML!Attribute(
	  name <-'endarrow',
	  value <- 'default'
	),
	color: XML!Attribute(
	  name <-'color',
	  value <- '#FFBC00'
	)
}

rule agent {
  from s: RWM!Agent
  to t: XML!Element (
	  name <- 'node',
	  children <- Sequence{id,text,icon,position,folded,doc}
  	),
	id: XML!Attribute (
	  name <- 'id',
	  value <- s.__xmiID__
	),
	text: XML!Attribute (
	  name <- 'text',
	  value <- s.name
	),
	position: XML!Attribute (
	  name <- 'position',
	  value <- 'left'
	),
	icon: XML!Element (
	  name<-'icon',
	  children <- Sequence{ksmiletris}
	),
	ksmiletris: XML!Attribute(
	  name <-'BUILTIN',
	  value <- 'ksmiletris'
	),
	folded: XML!Attribute (
	  name <- 'folded',
	  value <- 'true'
	),
	doc: XML!Element (
	  name <- 'node',
	  children <- Sequence{docid,doctext,docicon}
	),
	docid: XML!Attribute (
	  name <- 'id',
	  value <- 'doc'+s.__xmiID__
	),
	doctext: XML!Attribute (
	  name <- 'text',
	  value <- s.documentation
	),
	docicon: XML!Element (
	  name<-'icon',
	  children <- Sequence{attach}
	),
	attach: XML!Attribute(
	  name <-'BUILTIN',
	  value <- 'attach'
	)
}

rule entity {
  from s: RWM!Entity
  to t: XML!Element (
	  name <- 'node',
	  children <- Sequence{id,text,icon,folded,s.attributes,position,doc,
	  	RWM!RelationShip->allInstances()->select(r | r.ends->collect(e | e.object)->includes(s))
	  }
  	),
	id: XML!Attribute (
	  name <- 'id',
	  value <- s.__xmiID__
	),
	text: XML!Attribute (
	  name <- 'text',
	  value <- s.name
	),
	position: XML!Attribute (
	  name <- 'position',
	  value <- 'left'
	),
	folded: XML!Attribute (
	  name <- 'folded',
	  value <- 'true'
	),
	icon: XML!Element (
	  name<-'icon',
	  children <- Sequence{mail}
	),
	mail: XML!Attribute(
	  name <-'BUILTIN',
	  value <- 'mail'
	),
	doc: XML!Element (
	  name <- 'node',
	  children <- Sequence{docid,doctext,docicon}
	),
	docid: XML!Attribute (
	  name <- 'id',
	  value <- 'doc'+s.__xmiID__
	),
	doctext: XML!Attribute (
	  name <- 'text',
	  value <- s.documentation
	),
	docicon: XML!Element (
	  name<-'icon',
	  children <- Sequence{attach}
	),
	attach: XML!Attribute(
	  name <-'BUILTIN',
	  value <- 'attach'
	)
}

rule attribute {
  from s: RWM!Attribute
  to t: XML!Element (
	  name <- 'node',
	  children <- Sequence{id,text,folded,doc}
  	),
	id: XML!Attribute (
	  name <- 'id',
	  value <- s.__xmiID__
	),
	text: XML!Attribute (
	  name <- 'text',
	  value <- s.name + ':' + s.type.toString()
	),
	folded: XML!Attribute (
	  name <- 'folded',
	  value <- 'true'
	),
	doc: XML!Element (
	  name <- 'node',
	  children <- Sequence{docid,doctext,docicon}
	),
	docid: XML!Attribute (
	  name <- 'id',
	  value <- 'doc'+s.__xmiID__
	),
	doctext: XML!Attribute (
	  name <- 'text',
	  value <- s.documentation
	),
	docicon: XML!Element (
	  name<-'icon',
	  children <- Sequence{attach}
	),
	attach: XML!Attribute(
	  name <-'BUILTIN',
	  value <- 'attach'
	)
}

rule relationship {
  from s: RWM!RelationShip
  to link: XML!Element (
	  name <- 'arrowlink',
	  children <- Sequence{destination,startarrow,endarrow,color}
	),
	destination: XML!Attribute (
	  name <- 'destination',
	  value <- s.ends->last().object.__xmiID__
	),
	startarrow: XML!Attribute (
	  name <- 'startarrow',
	  value <- 'default'
	),
	endarrow: XML!Attribute(
	  name <-'endarrow',
	  value <- 'default'
	),
	color: XML!Attribute(
	  name <-'color',
	  value <- '#4BBD0E'
	)
}