-- @atlcompiler atl2006
-- List of agent
module FreeMind; -- Module Template
create OUT : FreeMind from IN : RWM;

helper context String def : normalize() : String =
	self.regexReplaceAll('<([a-zA-Z0-9]*)>(.*)</\\1>','$2').regexReplaceAll('<([a-zA-Z0-9]*)>','')
	    .regexReplaceAll('&lt;([a-zA-Z0-9]*)>(.*)&lt;/\\1>','$2').regexReplaceAll('&lt;([a-zA-Z0-9]*)>','')
		.regexReplaceAll('\\\\(.)','$1');

rule definition {
  from s: RWM!RequirementsDefinition
  to t : FreeMind!"Map" (
	  node <- t_node,
	  version <- '1.0'
  	),
	t_node : FreeMind!Node (
		text <- 'Structure d\'information',
		node <- RWM!Entity->allInstances(),
		folded <- false
	)
}

rule entity {
	from s : RWM!Entity
	to t : FreeMind!Node (
		text <- s.name,
		node <- Sequence{description}->union(s.attributes),
		arrowlink <- RWM!RelationShip->allInstances()->select(r | r.ends->first().object = s),
		folded <- false,
		id <- s.__xmiID__
	),
	description : FreeMind!Node (
		text <- s.documentation.normalize(),
		font <- Sequence{font_italic}
	),
	font_italic : FreeMind!Font (
		bold <- false,
		italic <- true,
		size <- 10,
		name <- 'SansSerif'
	)
}

rule attribute {
	from s : RWM!Attribute
	to t : FreeMind!Node (
		text <- s.name,
		node <- Sequence{description},
		folded <- true
	),
	description : FreeMind!Node (
		text <- s.documentation.normalize(),
		font <- Sequence{font_italic}
	),
	font_italic : FreeMind!Font (
		bold <- false,
		italic <- true,
		size <- 10,
		name <- 'SansSerif'
	)
}

rule relationship {
	from s : RWM!RelationShip
	to t : FreeMind!ArrowLink (
		destination <- s.ends->last().object.__xmiID__,
		startarrow <- 'default',
		endarrow <- 'default'
	)
}