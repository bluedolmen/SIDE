<?xml version="1.0" encoding="ASCII"?>
<template:ResourceSet xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:core="http://www.obeo.fr/acceleo/template/2.2.0/core" xmlns:expressions="http://www.obeo.fr/acceleo/template/2.2.0/expressions" xmlns:statements="http://www.obeo.fr/acceleo/template/2.2.0/statements" xmlns:template="http://www.obeo.fr/acceleo/template/2.2.0">
  <resources xsi:type="core:Template" name="Risk_SVG.toText.toSVG" imports="//@resources.9 //@resources.8 //@resources.7 //@resources.6 //@resources.5 //@resources.4 //@resources.3 //@resources.2 //@resources.1" beginTag="&lt;%" endTag="%>">
    <scripts>
      <descriptor name="writePath" type="SVG.Path" description=""/>
      <statements xsi:type="statements:Text" value="&lt;path d=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="d" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;style=&quot;fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot;>&#xA;&lt;/path>"/>
    </scripts>
    <scripts>
      <descriptor name="writeRect" type="SVG.Rect" description=""/>
      <statements xsi:type="statements:Text" value="&lt;rect&#xA;&#x9;x=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="position" prefix=""/>
          <calls name="x" prefix=""/>
          <calls name="toString" prefix=""/>
          <calls name="replaceAll" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value="&#xa0;"/>
            <arguments xsi:type="expressions:StringLiteral" value=""/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;y=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="position" prefix=""/>
          <calls name="y" prefix=""/>
          <calls name="toString" prefix=""/>
          <calls name="replaceAll" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value="&#xa0;"/>
            <arguments xsi:type="expressions:StringLiteral" value=""/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;width=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="size" prefix=""/>
          <calls name="width" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;height=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="size" prefix=""/>
          <calls name="height" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;style=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="fill" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="stroke" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;>&#xA;&lt;/rect>"/>
    </scripts>
    <scripts>
      <descriptor name="toSVG" type="SVG.Svg" description="">
        <file>
          <statements xsi:type="statements:Text" value="file.svg"/>
        </file>
      </descriptor>
      <statements xsi:type="statements:Text" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?>&#xA;&lt;svg&#xA;"/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator=">">
            <operands xsi:type="expressions:CallSet">
              <calls name="baseProfile" prefix=""/>
              <calls name="length" prefix=""/>
            </operands>
            <operands xsi:type="expressions:IntegerLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" baseprofile=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="baseProfile" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator=">">
            <operands xsi:type="expressions:CallSet">
              <calls name="namespace" prefix=""/>
              <calls name="length" prefix=""/>
            </operands>
            <operands xsi:type="expressions:IntegerLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" xmlns=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="namespace" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator=">">
            <operands xsi:type="expressions:CallSet">
              <calls name="version" prefix=""/>
              <calls name="length" prefix=""/>
            </operands>
            <operands xsi:type="expressions:IntegerLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" version=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="version" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator=">">
            <operands xsi:type="expressions:CallSet">
              <calls name="width" prefix=""/>
              <calls name="length" prefix=""/>
            </operands>
            <operands xsi:type="expressions:IntegerLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" width=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="width" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator=">">
            <operands xsi:type="expressions:CallSet">
              <calls name="height" prefix=""/>
              <calls name="length" prefix=""/>
            </operands>
            <operands xsi:type="expressions:IntegerLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value=" height=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="height" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="children" prefix="">
              <filter xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
                <calls name="equalsIgnoreCase" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="Path"/>
                </calls>
              </filter>
            </calls>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="&#x9;&#x9;"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cast" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="Path"/>
            </calls>
            <calls name="writePath" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="children" prefix="">
              <filter xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
                <calls name="equalsIgnoreCase" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="Rect"/>
                </calls>
              </filter>
            </calls>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="&#x9;&#x9;"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cast" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="Rect"/>
            </calls>
            <calls name="writeRect" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="children" prefix="">
              <filter xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
                <calls name="equalsIgnoreCase" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="Text"/>
                </calls>
              </filter>
            </calls>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="&#x9;&#x9;"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cast" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="Text"/>
            </calls>
            <calls name="writeText" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/svg>"/>
    </scripts>
    <scripts>
      <descriptor name="writeText" type="SVG.Text" description=""/>
      <statements xsi:type="statements:Text" value="&lt;text&#xA;&#x9;style=&quot;-inkscape-font-specification:Bitstream Vera Sans;text-align="/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="textAlign" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value=";font-size="/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="fontSize" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value=";text-anchor:middle;&quot;&#xA;&#x9;x=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="position" prefix=""/>
          <calls name="x" prefix=""/>
          <calls name="toString" prefix=""/>
          <calls name="replaceAll" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value="&#xa0;"/>
            <arguments xsi:type="expressions:StringLiteral" value=""/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;y=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="position" prefix=""/>
          <calls name="y" prefix=""/>
          <calls name="toString" prefix=""/>
          <calls name="replaceAll" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value=" "/>
            <arguments xsi:type="expressions:StringLiteral" value=""/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;>&#xA;&#x9;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="content" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&#xA;&lt;/text>"/>
    </scripts>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.StringServices">
    <methods name="length" return="int"/>
    <methods name="charAt" return="java.lang.String">
      <parameters type="int"/>
    </methods>
    <methods name="indexOf" return="int">
      <parameters type="java.lang.String"/>
      <parameters type="int"/>
    </methods>
    <methods name="indexOf" return="int">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="equalsIgnoreCase" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="startsWith" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="endsWith" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="lastIndexOf" return="int">
      <parameters type="java.lang.String"/>
      <parameters type="int"/>
    </methods>
    <methods name="lastIndexOf" return="int">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="substring" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
      <parameters type="int"/>
    </methods>
    <methods name="substring" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
    </methods>
    <methods name="matches" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="replaceFirst" return="java.lang.String">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="replaceAll" return="java.lang.String">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="split" return="java.util.List">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="toLowerCase" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toUpperCase" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="trim" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toU1Case" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toL1Case" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="indentSpace" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="indentTab" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.EObjectServices">
    <methods name="load" return="org.eclipse.emf.ecore.EObject">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getRootContainer" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eClass" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eContents" return="org.eclipse.emf.common.util.EList"/>
    <methods name="eResource" return="java.lang.String"/>
    <methods name="eContainer" return="org.eclipse.emf.ecore.EObject">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="eContainer" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eContainingFeature" return="org.eclipse.emf.ecore.EStructuralFeature"/>
    <methods name="eContainmentFeature" return="org.eclipse.emf.ecore.EReference"/>
    <methods name="eAllContents" return="fr.obeo.acceleo.gen.template.eval.ENodeList">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="eAllContents" return="fr.obeo.acceleo.gen.template.eval.ENodeList"/>
    <methods name="eCrossReferences" return="java.util.List"/>
    <methods name="eResourceName" return="java.lang.String"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.XpathServices">
    <methods name="parent" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="child" return="java.util.List"/>
    <methods name="self" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="ancestor" return="java.util.List"/>
    <methods name="following" return="java.util.List"/>
    <methods name="preceding" return="java.util.List"/>
    <methods name="descendant" return="java.util.List"/>
    <methods name="precedingSibling" return="java.util.List"/>
    <methods name="followingSibling" return="java.util.List"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ResourceServices">
    <methods name="getFileContent" return="java.lang.String">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ContextServices">
    <methods name="get" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="put" return="void">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="push" return="void"/>
    <methods name="pop" return="void"/>
    <methods name="peek" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="nPut" return="void">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nPush" return="void"/>
    <methods name="nPop" return="void"/>
    <methods name="nPeek" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ENodeServices">
    <methods name="toString" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="cast" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="debug" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="reverse" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sort" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sort" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="current" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="current" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="filter" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="adapt" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nSize" return="int"/>
    <methods name="sep" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="trace" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="trace" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="minimize" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sepStr" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="until" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
    </methods>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
      <parameters type="int"/>
    </methods>
    <methods name="nFirst" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nLast" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nSort" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nSort" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nMinimize" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nReverse" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nContains" return="boolean">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.RequestServices">
    <methods name="delete" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="delete" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="select" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="select" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="evaluate" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.PropertiesServices">
    <methods name="getProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getBestProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Metamodel" name="http://www.w3.org/Graphics/SVG/1.1/"/>
</template:ResourceSet>
