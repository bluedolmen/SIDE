<?xml version="1.0" encoding="ASCII"?>
<template:ResourceSet xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:core="http://www.obeo.fr/acceleo/template/2.2.0/core" xmlns:expressions="http://www.obeo.fr/acceleo/template/2.2.0/expressions" xmlns:statements="http://www.obeo.fr/acceleo/template/2.2.0/statements" xmlns:template="http://www.obeo.fr/acceleo/template/2.2.0">
  <resources xsi:type="core:Template" name="main" imports="//@resources.9 //@resources.8 //@resources.7 //@resources.6 //@resources.5 //@resources.4 //@resources.3 //@resources.2 //@resources.1" beginTag="&lt;%" endTag="%>">
    <scripts>
      <descriptor name="dataPage_component" type="WebSite.Component" description=""/>
      <statements xsi:type="statements:Text" value="&lt;div id=&quot;component&quot;>&#xA;&#x9;&lt;div class=&quot;component_title&quot;>&#xA;&#x9;&lt;h2>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/h2>&#xA;&#x9;&lt;/div>&#xA;"/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="canRead" prefix=""/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="dataPage_component_read" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="canCreate" prefix=""/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&lt;div class=&quot;component_create&quot;>&#xA;&#x9;&#x9;&lt;a href=&quot;edit_"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="_"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="eContainer" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="?view"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="=1&amp;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="=1&quot;>Create a new &lt;i>"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&lt;/i>&lt;/a>&#xA;&#x9;&#x9;&lt;/div>&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/div>"/>
    </scripts>
    <scripts>
      <descriptor name="dataPage_component_read" type="WebSite.Component" description=""/>
      <statements xsi:type="statements:Text" value="&#x9;&lt;table>&#xA;&#x9;&#x9;&lt;tr>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="properties" prefix="">
              <filter xsi:type="expressions:Operator" operator="==">
                <operands xsi:type="expressions:CallSet">
                  <calls name="canRead" prefix=""/>
                </operands>
                <operands xsi:type="expressions:BooleanLiteral" value="true"/>
              </filter>
            </calls>
          </expression>
        </iterator>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="||">
              <operands xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
                <calls name="equalsIgnoreCase" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
                </calls>
              </operands>
              <operands xsi:type="expressions:Not">
                <expression xsi:type="expressions:Parenthesis">
                  <expression xsi:type="expressions:Operator" operator="||">
                    <operands xsi:type="expressions:CallSet">
                      <calls name="current" prefix="">
                        <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                      </calls>
                      <calls name="precedingSibling" prefix=""/>
                      <calls name="table" prefix=""/>
                      <calls name="nContains" prefix="">
                        <arguments xsi:type="expressions:CallSet">
                          <calls name="cast" prefix="">
                            <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                          </calls>
                          <calls name="idRight" prefix=""/>
                          <calls name="eContainer" prefix=""/>
                        </arguments>
                      </calls>
                    </operands>
                    <operands xsi:type="expressions:CallSet">
                      <calls name="current" prefix="">
                        <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                      </calls>
                      <calls name="precedingSibling" prefix=""/>
                      <calls name="table" prefix=""/>
                      <calls name="nContains" prefix="">
                        <arguments xsi:type="expressions:CallSet">
                          <calls name="cast" prefix="">
                            <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                          </calls>
                          <calls name="idLeft" prefix=""/>
                          <calls name="eContainer" prefix=""/>
                        </arguments>
                      </calls>
                    </operands>
                  </expression>
                </expression>
              </operands>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&lt;th>"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&lt;/th>&#xA;"/>
        </statements>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="canUpdate" prefix=""/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&lt;th>Edit&lt;/th>&#xA;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="canDelete" prefix=""/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&lt;th>Delete&lt;/th>&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&lt;?&#xA;"/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator=">">
            <operands xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="Component"/>
              </calls>
              <calls name="precedingSibling" prefix=""/>
              <calls name="nSize" prefix=""/>
            </operands>
            <operands xsi:type="expressions:IntegerLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;$nbPreviousTable = &quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="current" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="Component"/>
            </calls>
            <calls name="precedingSibling" prefix=""/>
            <calls name="nLast" prefix=""/>
            <calls name="table" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;$pkPreviousTable = &quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="current" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="Component"/>
            </calls>
            <calls name="precedingSibling" prefix=""/>
            <calls name="nLast" prefix=""/>
            <calls name="table" prefix=""/>
            <calls name="primaryKey" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&quot;;&#xA;"/>
        <elseStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;$nbPreviousTable = &quot;"/>
        <elseStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="current" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="Component"/>
            </calls>
            <calls name="table" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </elseStatements>
        <elseStatements xsi:type="statements:Text" value="&quot;;&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="dataPage_component_sqlQuery" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&#xA;&#x9;&#x9;&#x9;mysql_connect($host, $user, $password);&#xA;&#x9;&#x9;&#x9;mysql_select_db($db);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;$result = mysql_query($sql);&#xA;&#x9;&#x9;&#x9;while ($data = mysql_fetch_array($result) )&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;$tableName = &quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if (isset($_GET[&quot;id&quot;.$tableName]) &amp;&amp; $_GET[&quot;id&quot;.$tableName]==$data[&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="primaryKey" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;]) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;echo &quot;&lt;tr class=\&quot;line_selected\&quot;>\n&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;echo &quot;&lt;tr>\n&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;};&#xA;&#x9;&#x9;?>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="properties" prefix="">
              <filter xsi:type="expressions:CallSet">
                <calls name="canRead" prefix=""/>
              </filter>
            </calls>
          </expression>
        </iterator>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:CallSet">
              <calls name="eClass" prefix=""/>
              <calls name="name" prefix=""/>
              <calls name="equalsIgnoreCase" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
              </calls>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;td>&lt;? echo $data['"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
              </calls>
              <calls name="field" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="']; ?>&lt;/td>&#xA;"/>
          <elseStatements xsi:type="statements:If">
            <condition xsi:type="expressions:Parenthesis">
              <expression xsi:type="expressions:Not">
                <expression xsi:type="expressions:Parenthesis">
                  <expression xsi:type="expressions:Operator" operator="||">
                    <operands xsi:type="expressions:CallSet">
                      <calls name="current" prefix="">
                        <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                      </calls>
                      <calls name="precedingSibling" prefix=""/>
                      <calls name="table" prefix=""/>
                      <calls name="nContains" prefix="">
                        <arguments xsi:type="expressions:CallSet">
                          <calls name="cast" prefix="">
                            <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                          </calls>
                          <calls name="idRight" prefix=""/>
                          <calls name="eContainer" prefix=""/>
                        </arguments>
                      </calls>
                    </operands>
                    <operands xsi:type="expressions:CallSet">
                      <calls name="current" prefix="">
                        <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                      </calls>
                      <calls name="precedingSibling" prefix=""/>
                      <calls name="table" prefix=""/>
                      <calls name="nContains" prefix="">
                        <arguments xsi:type="expressions:CallSet">
                          <calls name="cast" prefix="">
                            <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                          </calls>
                          <calls name="idLeft" prefix=""/>
                          <calls name="eContainer" prefix=""/>
                        </arguments>
                      </calls>
                    </operands>
                  </expression>
                </expression>
              </expression>
            </condition>
            <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;td>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;?&#xA;"/>
            <thenStatements xsi:type="statements:If">
              <condition xsi:type="expressions:Parenthesis">
                <expression xsi:type="expressions:Operator" operator="==">
                  <operands xsi:type="expressions:CallSet">
                    <calls name="current" prefix="">
                      <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                    </calls>
                    <calls name="table" prefix=""/>
                  </operands>
                  <operands xsi:type="expressions:CallSet">
                    <calls name="cast" prefix="">
                      <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                    </calls>
                    <calls name="idLeft" prefix=""/>
                    <calls name="eContainer" prefix=""/>
                  </operands>
                </expression>
              </condition>
              <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$idSource = &quot;"/>
              <thenStatements xsi:type="statements:Feature">
                <expression xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                  <calls name="idLeft" prefix=""/>
                  <calls name="name" prefix=""/>
                </expression>
              </thenStatements>
              <thenStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$idTarget = &quot;"/>
              <thenStatements xsi:type="statements:Feature">
                <expression xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                  <calls name="idRight" prefix=""/>
                  <calls name="name" prefix=""/>
                </expression>
              </thenStatements>
              <thenStatements xsi:type="statements:Text" value="&quot;;&#xA;"/>
              <elseStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$idSource = &quot;"/>
              <elseStatements xsi:type="statements:Feature">
                <expression xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                  <calls name="idRight" prefix=""/>
                  <calls name="name" prefix=""/>
                </expression>
              </elseStatements>
              <elseStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$idTarget = &quot;"/>
              <elseStatements xsi:type="statements:Feature">
                <expression xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                  <calls name="idLeft" prefix=""/>
                  <calls name="name" prefix=""/>
                </expression>
              </elseStatements>
              <elseStatements xsi:type="statements:Text" value="&quot;;&#xA;"/>
            </thenStatements>
            <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$sql = &quot;SELECT COUNT(*) as nb FROM &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.&quot; "/>
            <thenStatements xsi:type="statements:Feature">
              <expression xsi:type="expressions:CallSet">
                <calls name="cast" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                </calls>
                <calls name="idLeft" prefix=""/>
                <calls name="eContainer" prefix=""/>
                <calls name="name" prefix=""/>
              </expression>
            </thenStatements>
            <thenStatements xsi:type="statements:Text" value="2"/>
            <thenStatements xsi:type="statements:Feature">
              <expression xsi:type="expressions:CallSet">
                <calls name="cast" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                </calls>
                <calls name="idRight" prefix=""/>
                <calls name="eContainer" prefix=""/>
                <calls name="name" prefix=""/>
              </expression>
            </thenStatements>
            <thenStatements xsi:type="statements:Text" value="&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.&quot; WHERE $idSource = &quot; . $data[$idSource]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.&quot;;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$result2 = mysql_query($sql);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$data2 = mysql_fetch_array($result2);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$nb = $data2['nb'];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$url = $_SERVER['REQUEST_URI'];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;"/>
            <thenStatements xsi:type="statements:For">
              <iterator xsi:type="expressions:Parenthesis">
                <expression xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                  </calls>
                  <calls name="followingSibling" prefix=""/>
                </expression>
              </iterator>
              <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$url = removeParameter($url,&quot;view"/>
              <statements xsi:type="statements:Feature">
                <expression xsi:type="expressions:CallSet">
                  <calls name="table" prefix=""/>
                  <calls name="name" prefix=""/>
                </expression>
              </statements>
              <statements xsi:type="statements:Text" value="&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$url = removeParameter($url,&quot;id"/>
              <statements xsi:type="statements:Feature">
                <expression xsi:type="expressions:CallSet">
                  <calls name="table" prefix=""/>
                  <calls name="name" prefix=""/>
                </expression>
              </statements>
              <statements xsi:type="statements:Text" value="&quot;);&#xA;"/>
            </thenStatements>
            <thenStatements xsi:type="statements:Text" value="&#xA;"/>
            <thenStatements xsi:type="statements:If">
              <condition xsi:type="expressions:Parenthesis">
                <expression xsi:type="expressions:Operator" operator="==">
                  <operands xsi:type="expressions:CallSet">
                    <calls name="current" prefix="">
                      <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                    </calls>
                    <calls name="table" prefix=""/>
                  </operands>
                  <operands xsi:type="expressions:CallSet">
                    <calls name="cast" prefix="">
                      <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                    </calls>
                    <calls name="idLeft" prefix=""/>
                    <calls name="eContainer" prefix=""/>
                  </operands>
                </expression>
              </condition>
              <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$name = &quot;view"/>
              <thenStatements xsi:type="statements:Feature">
                <expression xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                  <calls name="idRight" prefix=""/>
                  <calls name="eContainer" prefix=""/>
                  <calls name="name" prefix=""/>
                </expression>
              </thenStatements>
              <thenStatements xsi:type="statements:Text" value="&quot;;&#xA;"/>
              <elseStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$name = &quot;view"/>
              <elseStatements xsi:type="statements:Feature">
                <expression xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                  <calls name="idLeft" prefix=""/>
                  <calls name="eContainer" prefix=""/>
                  <calls name="name" prefix=""/>
                </expression>
              </elseStatements>
              <elseStatements xsi:type="statements:Text" value="&quot;;&#xA;"/>
            </thenStatements>
            <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$value = &quot;1&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$url = appendParameter($url,$name,$value);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$name = &quot;id"/>
            <thenStatements xsi:type="statements:Feature">
              <expression xsi:type="expressions:CallSet">
                <calls name="current" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                </calls>
                <calls name="table" prefix=""/>
                <calls name="name" prefix=""/>
              </expression>
            </thenStatements>
            <thenStatements xsi:type="statements:Text" value="&quot;;&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$value = $data[$idSource];&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$url = appendParameter($url,$name,$value);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;?>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;? if ($nb>0) {?> &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;a href=&quot;&lt;? echo $url; ?>&quot;>See &lt;? echo $nb; ?> element(s).&lt;/a>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;? } else { ?>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;None&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;? } ?>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/td>&#xA;&#xA;"/>
          </elseStatements>
        </statements>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="canUpdate" prefix=""/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&lt;td>&lt;a href=&quot;edit_"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="_"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="eContainer" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="?"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="=1&amp;idObject=&lt;? echo $data['"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="primaryKey" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="']; ?>&quot;>Edit&lt;/a>&lt;/td>&#xA;"/>
      </statements>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="canDelete" prefix=""/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&lt;td>&lt;a href=&quot;"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="eContainer" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="?view"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="=1&amp;deleteObject=1&amp;table_name="/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&amp;field_name="/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="primaryKey" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="&amp;idObject=&lt;? echo $data['"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="primaryKey" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="']; ?>&quot;>Delete&lt;/a>&lt;/td>&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&lt;?&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;mysql_close();&#xA;&#x9;&#x9;?>&#xA;&#x9;&lt;/table>"/>
    </scripts>
    <scripts>
      <descriptor name="dataPage_component_sqlQuery" type="WebSite.Component" description=""/>
      <statements xsi:type="statements:Text" value="if (isset($pkPreviousTable)) {&#xA;&#x9;$sql = &quot;SELECT &quot;&#xA;&#x9;&#x9;.&quot; "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="properties" prefix="">
            <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
              <operands xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
                <calls name="equalsIgnoreCase" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
                </calls>
              </operands>
              <operands xsi:type="expressions:CallSet">
                <calls name="canRead" prefix=""/>
              </operands>
            </filter>
          </calls>
          <calls name="cast" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
          </calls>
          <calls name="field" prefix=""/>
          <calls name="name" prefix=""/>
          <calls name="sep" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value=","/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;"/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator=">">
            <operands xsi:type="expressions:CallSet">
              <calls name="properties" prefix="">
                <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
                  <operands xsi:type="expressions:CallSet">
                    <calls name="eClass" prefix=""/>
                    <calls name="name" prefix=""/>
                    <calls name="equalsIgnoreCase" prefix="">
                      <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
                    </calls>
                  </operands>
                  <operands xsi:type="expressions:CallSet">
                    <calls name="canRead" prefix=""/>
                  </operands>
                </filter>
              </calls>
              <calls name="nSize" prefix=""/>
            </operands>
            <operands xsi:type="expressions:IntegerLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;.&quot;,&quot;&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;.&quot; "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="primaryKey" prefix=""/>
          <calls name="name" prefix=""/>
          <calls name="split" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value=","/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;&#x9;.&quot; FROM "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value=" as s&quot;&#xA;&#x9;&#x9;.&quot; WHERE (&quot;&#xA;&#x9;&#x9;.&quot;     SELECT COUNT(*)&quot;&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:CallSet">
          <calls name="properties" prefix="">
            <filter xsi:type="expressions:CallSet">
              <calls name="eClass" prefix=""/>
              <calls name="name" prefix=""/>
              <calls name="equalsIgnoreCase" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
            </filter>
          </calls>
        </iterator>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="&amp;&amp;">
              <operands xsi:type="expressions:Operator" operator="==">
                <operands xsi:type="expressions:CallSet">
                  <calls name="cast" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                  <calls name="idLeft" prefix=""/>
                  <calls name="eContainer" prefix=""/>
                </operands>
                <operands xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                  </calls>
                  <calls name="table" prefix=""/>
                </operands>
              </operands>
              <operands xsi:type="expressions:Operator" operator="==">
                <operands xsi:type="expressions:CallSet">
                  <calls name="cast" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                  <calls name="idRight" prefix=""/>
                  <calls name="eContainer" prefix=""/>
                </operands>
                <operands xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                  </calls>
                  <calls name="precedingSibling" prefix=""/>
                  <calls name="nLast" prefix=""/>
                  <calls name="table" prefix=""/>
                </operands>
              </operands>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;.&quot;     FROM "/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idLeft" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="2"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idRight" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value=" as t&quot;&#xA;"/>
        </statements>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="&amp;&amp;">
              <operands xsi:type="expressions:Operator" operator="==">
                <operands xsi:type="expressions:CallSet">
                  <calls name="cast" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                  <calls name="idRight" prefix=""/>
                  <calls name="eContainer" prefix=""/>
                </operands>
                <operands xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                  </calls>
                  <calls name="table" prefix=""/>
                </operands>
              </operands>
              <operands xsi:type="expressions:Operator" operator="==">
                <operands xsi:type="expressions:CallSet">
                  <calls name="cast" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                  <calls name="idLeft" prefix=""/>
                  <calls name="eContainer" prefix=""/>
                </operands>
                <operands xsi:type="expressions:CallSet">
                  <calls name="current" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                  </calls>
                  <calls name="precedingSibling" prefix=""/>
                  <calls name="nLast" prefix=""/>
                  <calls name="table" prefix=""/>
                </operands>
              </operands>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;.&quot;     FROM "/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idLeft" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="2"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idRight" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value=" as t&quot;&#xA;"/>
        </statements>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;.&quot;     WHERE t."/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="primaryKey" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value=" = s."/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="primaryKey" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;&#x9;.&quot;     AND t.$pkPreviousTable = \&quot;&quot;.$_GET[&quot;id$nbPreviousTable&quot;].&quot;\&quot;) > 0;&quot;;&#xA;} else {&#xA;&#x9;$sql = &quot;SELECT &quot;&#xA;&#x9;&#x9;.&quot; "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="properties" prefix="">
            <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
              <operands xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
                <calls name="equalsIgnoreCase" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
                </calls>
              </operands>
              <operands xsi:type="expressions:CallSet">
                <calls name="canRead" prefix=""/>
              </operands>
            </filter>
          </calls>
          <calls name="cast" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
          </calls>
          <calls name="field" prefix=""/>
          <calls name="name" prefix=""/>
          <calls name="sep" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value=","/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;"/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator=">">
            <operands xsi:type="expressions:CallSet">
              <calls name="properties" prefix="">
                <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
                  <operands xsi:type="expressions:CallSet">
                    <calls name="eClass" prefix=""/>
                    <calls name="name" prefix=""/>
                    <calls name="equalsIgnoreCase" prefix="">
                      <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
                    </calls>
                  </operands>
                  <operands xsi:type="expressions:CallSet">
                    <calls name="canRead" prefix=""/>
                  </operands>
                </filter>
              </calls>
              <calls name="nSize" prefix=""/>
            </operands>
            <operands xsi:type="expressions:IntegerLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;.&quot;,&quot;&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;.&quot; "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="primaryKey" prefix=""/>
          <calls name="name" prefix=""/>
          <calls name="split" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value=","/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;    .&quot; FROM "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value=";&quot;;&#xA;}"/>
    </scripts>
    <scripts>
      <descriptor name="dataPage" type="WebSite.DataPage" description="">
        <file>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </statements>
          <statements xsi:type="statements:Text" value="/"/>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="name" prefix=""/>
            </expression>
          </statements>
        </file>
      </descriptor>
      <statements xsi:type="statements:Text" value="&lt;html>&#xA;&#x9;&lt;head>&#xA;&#x9;&#x9;&lt;title>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="title" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/title>&#xA;&#x9;&#x9;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/main.css&quot;>&#xA;&#x9;&lt;/head>&#xA;&#x9;&lt;body>&#xA;&#x9;&#x9;&lt;? &#xA;&#x9;&#x9;&#x9;require(&quot;./mysql/mysql_util.php&quot;);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;function appendParameter($url, $paramName, $paramValue) {&#xA;&#x9;&#x9;&#x9;&#x9;$tmp = removeParameter($url,$paramName);&#xA;&#x9;&#x9;&#x9;&#x9;$separator = &quot;?&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;if (strpos($tmp,&quot;?&quot;)!=false)&#xA;  &#x9;&#x9;&#x9;&#x9;&#x9;$separator = &quot;&amp;&quot;;&#xA; &#x9;&#x9;&#x9;&#x9;return $tmp . $separator . &quot;$paramName=$paramValue&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;function removeParameter($url, $paramName) {&#xA; &#x9;&#x9;&#x9;&#x9;$tmp = ereg_replace(&quot;$paramName=([a-zA-Z0-9])*&quot;,&quot;&quot;,$url);&#xA; &#x9;&#x9;&#x9;&#x9;$tmp = ereg_replace(&quot;\&amp;\&amp;&quot;,&quot;&amp;&quot;,$tmp);&#xA; &#x9;&#x9;&#x9;&#x9;$tmp = ereg_replace(&quot;\?\&amp;&quot;,&quot;?&quot;,$tmp);&#xA; &#x9;&#x9;&#x9;&#x9;return $tmp;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;?>&#xA;&#x9;&#x9;&lt;div id=&quot;data&quot;>&#xA;&#x9;&#x9;&#x9;&lt;h1>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="title" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/h1>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="components" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="==">
              <operands xsi:type="expressions:CallSet">
                <calls name="current" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="DataPage"/>
                </calls>
                <calls name="mainComponent" prefix=""/>
              </operands>
              <operands xsi:type="expressions:CallSet">
                <calls name="current" prefix=""/>
              </operands>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="dataPage_component" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&#xA;"/>
          <elseStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&lt;? if (isset($_GET['view"/>
          <elseStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="table" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </elseStatements>
          <elseStatements xsi:type="statements:Text" value="'])) { ?>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
          <elseStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="dataPage_component" prefix=""/>
            </expression>
          </elseStatements>
          <elseStatements xsi:type="statements:Text" value="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;? } ?>&#xA;"/>
        </statements>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;&lt;/div>&#xA;&#x9;&lt;/body>&#xA;&lt;/html>"/>
    </scripts>
    <scripts>
      <descriptor name="goalPage_frame" type="WebSite.FramePage" description="">
        <file>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </statements>
          <statements xsi:type="statements:Text" value="/"/>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="name" prefix=""/>
            </expression>
          </statements>
        </file>
      </descriptor>
      <statements xsi:type="statements:Text" value="&lt;frameset cols=&quot;20%,80%&quot; frameborder=&quot;no&quot;>&#xA;&#x9;&lt;frame src=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="col1" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot; name=&quot;goalItems&quot;>&#xA;&#x9;&lt;frame name=&quot;data&quot;>&#xA;&lt;/frameset>"/>
    </scripts>
    <scripts>
      <descriptor name="goalPage_goalItem" type="WebSite.GoalItem" description=""/>
      <statements xsi:type="statements:Text" value="&lt;ul>&#xA;&#x9;&lt;li/>&lt;a href=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="page" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot; target=&quot;data&quot;>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="label" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/a>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="sub" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="&#x9;&#x9;"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="goalPage_goalItem" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/ul>"/>
    </scripts>
    <scripts>
      <descriptor name="goalPage_list" type="WebSite.GoalPage" description="">
        <file>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </statements>
          <statements xsi:type="statements:Text" value="/"/>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="name" prefix=""/>
            </expression>
          </statements>
        </file>
      </descriptor>
      <statements xsi:type="statements:Text" value="&lt;html>&#xA;&#x9;&lt;head>&#xA;&#x9;&#x9;&lt;title>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="title" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/title>&#xA;&#x9;&#x9;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/main.css&quot;>&#xA;&#x9;&lt;/head>&#xA;&#x9;&lt;body>&#xA;&#x9;&#x9;&lt;div id=&quot;goalItems&quot;>&#xA;&#x9;&#x9;&#x9;&lt;h1>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="title" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/h1>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="items" prefix=""/>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9; &#x9;"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="goalPage_goalItem" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;&lt;/div>&#xA;&#x9;&#x9;&lt;br/>&#xA;&#x9;&#x9;&lt;div id=&quot;logout&quot;>&#xA;&#x9;&#x9;&#x9;&lt;a href=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="eContainer" prefix=""/>
          <calls name="pages" prefix="">
            <filter xsi:type="expressions:CallSet">
              <calls name="eClass" prefix=""/>
              <calls name="name" prefix=""/>
              <calls name="equalsIgnoreCase" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="LoginPage"/>
              </calls>
            </filter>
          </calls>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot; target=&quot;_parent&quot;>Logout&lt;/a>&#xA;&#x9;&#x9;&lt;/div>&#xA;&#x9;&lt;/body>&#xA;&lt;/html>"/>
    </scripts>
    <scripts>
      <descriptor name="loginPage" type="WebSite.LoginPage" description="">
        <file>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </statements>
          <statements xsi:type="statements:Text" value="/"/>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="name" prefix=""/>
            </expression>
          </statements>
        </file>
      </descriptor>
      <statements xsi:type="statements:Text" value="&lt;html>&#xA;&#x9;&lt;head>&#xA;&#x9;&#x9;&lt;title>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="title" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/title>&#xA;&#x9;&#x9;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/main.css&quot;>&#xA;&#x9;&lt;/head>&#xA;&#x9;&lt;body>&#xA;&#x9;&#x9;&lt;div id=&quot;projectTitle&quot;>&#xA;&#x9;&#x9;&#x9;&lt;h1>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="eContainer" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/h1>&#xA;&#x9;&#x9;&lt;/div>&#xA;&#x9;&#x9;&lt;div id=&quot;users&quot;>&#xA;&#x9;&#x9;&#x9;&lt;h1>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="title" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/h1>&#xA;&#x9;&#x9;&#x9;&lt;ul>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="links" prefix=""/>
            <calls name="nSort" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="label"/>
            </calls>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&lt;li/>&lt;a href=&quot;frame_"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="page" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&quot;>"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="label" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&lt;/a>&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&lt;/ul>&#xA;&#x9;&#x9;&lt;/div>&#xA;&#x9;&lt;/body>&#xA;&lt;/html>"/>
    </scripts>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.StringServices">
    <methods name="length" return="int"/>
    <methods name="charAt" return="java.lang.String">
      <parameters type="int"/>
    </methods>
    <methods name="indexOf" return="int">
      <parameters type="java.lang.String"/>
      <parameters type="int"/>
    </methods>
    <methods name="indexOf" return="int">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="equalsIgnoreCase" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="startsWith" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="endsWith" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="lastIndexOf" return="int">
      <parameters type="java.lang.String"/>
      <parameters type="int"/>
    </methods>
    <methods name="lastIndexOf" return="int">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="substring" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
      <parameters type="int"/>
    </methods>
    <methods name="substring" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
    </methods>
    <methods name="matches" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="replaceFirst" return="java.lang.String">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="replaceAll" return="java.lang.String">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="split" return="java.util.List">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="toLowerCase" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toUpperCase" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="trim" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toU1Case" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toL1Case" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="indentSpace" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="indentTab" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.EObjectServices">
    <methods name="load" return="org.eclipse.emf.ecore.EObject">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getRootContainer" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eClass" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eContents" return="org.eclipse.emf.common.util.EList"/>
    <methods name="eResource" return="java.lang.String"/>
    <methods name="eContainer" return="org.eclipse.emf.ecore.EObject">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="eContainer" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eContainingFeature" return="org.eclipse.emf.ecore.EStructuralFeature"/>
    <methods name="eContainmentFeature" return="org.eclipse.emf.ecore.EReference"/>
    <methods name="eAllContents" return="fr.obeo.acceleo.gen.template.eval.ENodeList">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="eAllContents" return="fr.obeo.acceleo.gen.template.eval.ENodeList"/>
    <methods name="eCrossReferences" return="java.util.List"/>
    <methods name="eResourceName" return="java.lang.String"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.XpathServices">
    <methods name="parent" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="child" return="java.util.List"/>
    <methods name="self" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="ancestor" return="java.util.List"/>
    <methods name="following" return="java.util.List"/>
    <methods name="preceding" return="java.util.List"/>
    <methods name="descendant" return="java.util.List"/>
    <methods name="precedingSibling" return="java.util.List"/>
    <methods name="followingSibling" return="java.util.List"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ResourceServices">
    <methods name="getFileContent" return="java.lang.String">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ContextServices">
    <methods name="get" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="put" return="void">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="push" return="void"/>
    <methods name="pop" return="void"/>
    <methods name="peek" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="nPut" return="void">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nPush" return="void"/>
    <methods name="nPop" return="void"/>
    <methods name="nPeek" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ENodeServices">
    <methods name="toString" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="cast" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="debug" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="reverse" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sort" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sort" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="current" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="current" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="filter" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="adapt" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nSize" return="int"/>
    <methods name="sep" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="trace" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="trace" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="minimize" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sepStr" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="until" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
    </methods>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
      <parameters type="int"/>
    </methods>
    <methods name="nFirst" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nLast" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nSort" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nSort" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nMinimize" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nReverse" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nContains" return="boolean">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.RequestServices">
    <methods name="delete" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="delete" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="select" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="select" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="evaluate" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.PropertiesServices">
    <methods name="getProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getBestProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Metamodel" name="http://www.bluexml.com/rwm/website/1.0/"/>
</template:ResourceSet>
