<?xml version="1.0" encoding="ASCII"?>
<template:ResourceSet xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:core="http://www.obeo.fr/acceleo/template/2.2.0/core" xmlns:expressions="http://www.obeo.fr/acceleo/template/2.2.0/expressions" xmlns:statements="http://www.obeo.fr/acceleo/template/2.2.0/statements" xmlns:template="http://www.obeo.fr/acceleo/template/2.2.0">
  <resources xsi:type="core:Template" name="main_edit" imports="//@resources.9 //@resources.8 //@resources.7 //@resources.6 //@resources.5 //@resources.4 //@resources.3 //@resources.2 //@resources.1" beginTag="&lt;%" endTag="%>">
    <scripts>
      <descriptor name="dataPage_component" type="WebSite.Component" description="">
        <file>
          <statements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="dataPage_component_update_namefile" prefix=""/>
            </expression>
          </statements>
        </file>
      </descriptor>
      <statements xsi:type="statements:Text" value="&lt;html>&#xA;&#x9;&lt;head>&#xA;&#x9;&#x9;&lt;title>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/title>&#xA;&#x9;&#x9;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/main.css&quot;>&#xA;&#x9;&lt;/head>&#xA;&#x9;&lt;body>&#xA;&#x9;&#x9;&lt;? &#xA;&#x9;&#x9;&#x9;require(&quot;./mysql/mysql_util.php&quot;);&#xA;&#x9;&#x9;?>&#xA;&#x9;&#x9;&lt;div id=&quot;data&quot;>&#xA;&#x9;&#x9;&#x9;&lt;h1>"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&lt;/h1>&#xA;&#x9;&#x9;&#x9;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="dataPage_component_create_update" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&#xA;&#x9;&#x9;&lt;/div>&#xA;&#x9;&lt;/body>&#xA;&lt;/html>"/>
    </scripts>
    <scripts>
      <descriptor name="dataPage_component_create_update" type="WebSite.Component" description=""/>
      <statements xsi:type="statements:Text" value="&#x9;&lt;? if (isset($_GET[&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;])) { ?>&#x9;&#xA;&#x9;&#x9;&lt;div id=&quot;component_create&quot;>&#xA;&#x9;&#x9;&#x9;&lt;?&#xA;&#x9;&#x9;&#x9;&#x9;$fromUrl = $_SERVER['HTTP_REFERER'];&#xA;&#x9;&#x9;&#x9;&#x9;if (strpos($fromUrl,'?')) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$param = substr($fromUrl,strpos($fromUrl,'?'),strlen($fromUrl)-1);&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$param = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;$url = &quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="eContainer" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;.$param;&#xA;&#x9;&#x9;&#x9;?>&#xA;&#x9;&#x9;&#x9;&lt;form method=&quot;POST&quot; action=&quot;&lt;? echo $url; ?>&quot;>&#xA;&#x9;&#x9;&#x9;&lt;table class=&quot;table_edit&quot;>&#xA;&#x9;&#x9;&#x9;&lt;?&#xA;&#x9;&#x9;&#x9;&#x9;mysql_connect($host, $user, $password);&#xA;&#x9;&#x9;&#x9;&#x9;mysql_select_db($db);&#xA;&#x9;&#x9;&#x9;&#x9;if (isset($_GET[&quot;idObject&quot;])) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="dataPage_component_sqlQueryUpdate" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$result = mysql_query($sql);&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;$data = mysql_fetch_array($result);&#xA;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9;?>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="properties" prefix="">
              <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
                <operands xsi:type="expressions:CallSet">
                  <calls name="eClass" prefix=""/>
                  <calls name="name" prefix=""/>
                  <calls name="equalsIgnoreCase" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
                  </calls>
                </operands>
                <operands xsi:type="expressions:CallSet">
                  <calls name="canUpdate" prefix=""/>
                </operands>
              </filter>
            </calls>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&lt;tr>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;td class=&quot;property_name&quot;>"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="name" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&lt;/td>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;td>&lt;input &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type=&quot;text&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;name=&quot;"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cast" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
            </calls>
            <calls name="field" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;? if (isset($_GET[&quot;idObject&quot;])) {?>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;value=&quot;&lt;? echo $data['"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cast" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
            </calls>
            <calls name="field" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="']?>&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;? } ?>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/>&lt;/td>&#xA;&#x9;&#x9;&#x9;&#x9;&lt;/tr>&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&lt;?&#xA;&#x9;&#x9;&#x9;&#x9;$allJoinTable = array(); &#xA;&#x9;&#x9;&#x9;?>&#xA;"/>
      <statements xsi:type="statements:For">
        <iterator xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:CallSet">
            <calls name="properties" prefix="">
              <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
                <operands xsi:type="expressions:CallSet">
                  <calls name="eClass" prefix=""/>
                  <calls name="name" prefix=""/>
                  <calls name="equalsIgnoreCase" prefix="">
                    <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                  </calls>
                </operands>
                <operands xsi:type="expressions:CallSet">
                  <calls name="canUpdate" prefix=""/>
                </operands>
                <operands xsi:type="expressions:Not">
                  <expression xsi:type="expressions:Parenthesis">
                    <expression xsi:type="expressions:Operator" operator="||">
                      <operands xsi:type="expressions:CallSet">
                        <calls name="current" prefix="">
                          <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                        </calls>
                        <calls name="precedingSibling" prefix=""/>
                        <calls name="table" prefix=""/>
                        <calls name="nContains" prefix="">
                          <arguments xsi:type="expressions:CallSet">
                            <calls name="cast" prefix="">
                              <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                            </calls>
                            <calls name="idRight" prefix=""/>
                            <calls name="eContainer" prefix=""/>
                          </arguments>
                        </calls>
                      </operands>
                      <operands xsi:type="expressions:CallSet">
                        <calls name="current" prefix="">
                          <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                        </calls>
                        <calls name="precedingSibling" prefix=""/>
                        <calls name="table" prefix=""/>
                        <calls name="nContains" prefix="">
                          <arguments xsi:type="expressions:CallSet">
                            <calls name="cast" prefix="">
                              <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                            </calls>
                            <calls name="idLeft" prefix=""/>
                            <calls name="eContainer" prefix=""/>
                          </arguments>
                        </calls>
                      </operands>
                    </expression>
                  </expression>
                </operands>
              </filter>
            </calls>
          </expression>
        </iterator>
        <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&lt;?&#xA;"/>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="==">
              <operands xsi:type="expressions:CallSet">
                <calls name="current" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                </calls>
                <calls name="table" prefix=""/>
              </operands>
              <operands xsi:type="expressions:CallSet">
                <calls name="cast" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                </calls>
                <calls name="idLeft" prefix=""/>
                <calls name="eContainer" prefix=""/>
              </operands>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$idSource = &quot;"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idLeft" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$idTarget = &quot;"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idRight" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$tableSource = &quot;"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idLeft" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$tableTarget = &quot;"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idRight" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$attributes = &quot;"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idRight" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="fields" prefix=""/>
              <calls name="name" prefix=""/>
              <calls name="sep" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value=","/>
              </calls>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&quot;;&#xA;"/>
          <thenStatements xsi:type="statements:If">
            <condition xsi:type="expressions:Parenthesis">
              <expression xsi:type="expressions:CallSet">
                <calls name="current" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                </calls>
                <calls name="mandatoryRight" prefix=""/>
              </expression>
            </condition>
            <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$multiple = 1;&#xA;"/>
            <elseStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$multiple = 0;&#xA;"/>
          </thenStatements>
          <thenStatements xsi:type="statements:If">
            <condition xsi:type="expressions:Parenthesis">
              <expression xsi:type="expressions:CallSet">
                <calls name="current" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                </calls>
                <calls name="mandatoryLeft" prefix=""/>
              </expression>
            </condition>
            <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$manySource = 1;&#xA;"/>
            <elseStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$manySource = 0;&#xA;"/>
          </thenStatements>
          <elseStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$idSource = &quot;"/>
          <elseStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idRight" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </elseStatements>
          <elseStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$idTarget = &quot;"/>
          <elseStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idLeft" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </elseStatements>
          <elseStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$tableSource = &quot;"/>
          <elseStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idRight" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </elseStatements>
          <elseStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$tableTarget = &quot;"/>
          <elseStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idLeft" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </elseStatements>
          <elseStatements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$attributes = &quot;"/>
          <elseStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idLeft" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="fields" prefix=""/>
              <calls name="name" prefix=""/>
              <calls name="sep" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value=","/>
              </calls>
            </expression>
          </elseStatements>
          <elseStatements xsi:type="statements:Text" value="&quot;;&#xA;"/>
          <elseStatements xsi:type="statements:If">
            <condition xsi:type="expressions:Parenthesis">
              <expression xsi:type="expressions:CallSet">
                <calls name="current" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                </calls>
                <calls name="mandatoryLeft" prefix=""/>
              </expression>
            </condition>
            <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$multiple = 1;&#xA;"/>
            <elseStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$multiple = 0;&#xA;"/>
          </elseStatements>
          <elseStatements xsi:type="statements:If">
            <condition xsi:type="expressions:Parenthesis">
              <expression xsi:type="expressions:CallSet">
                <calls name="current" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                </calls>
                <calls name="mandatoryRight" prefix=""/>
              </expression>
            </condition>
            <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$manySource = 1;&#xA;"/>
            <elseStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$manySource = 0;&#xA;"/>
          </elseStatements>
        </statements>
        <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;$joinTable = &quot;"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cast" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
            </calls>
            <calls name="idLeft" prefix=""/>
            <calls name="eContainer" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="2"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="cast" prefix="">
              <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
            </calls>
            <calls name="idRight" prefix=""/>
            <calls name="eContainer" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$allJoinTable[] = $joinTable;&#xA;&#x9;&#x9;&#x9;&#x9;?>&#xA;&#x9;&#x9;&#x9;&#x9;&lt;tr>&lt;td class=&quot;relationship_name&quot; colspan=&quot;2&quot;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="name" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/td>&#xA;&#x9;&#x9;&#x9;&#x9;&lt;/tr>&#xA;&#x9;&#x9;&#x9;&#x9;&lt;tr>&lt;td colspan=&quot;2&quot;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;?&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$sql = &quot;SELECT t.$attributes &quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isset($_GET[&quot;idObject&quot;])) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$sql .= &quot; ,EXISTS(SELECT * FROM $joinTable j WHERE &quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$sql .= &quot; t.$idTarget = j.$idTarget AND j.$idSource=\&quot;&quot;.$_GET[&quot;idObject&quot;].&quot;\&quot; ) as selected&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$sql .= &quot; FROM $tableTarget t;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$result = mysql_query($sql);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$attributesA = split(&quot;,&quot;,$attributes);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;?>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;select &lt;? if ($multiple) echo &quot;multiple&quot;; ?> name=&quot;&lt;?echo $joinTable.&quot;__&quot;.$idTarget;?>[]&quot;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;?&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;while ($data2 = mysql_fetch_array($result)) {&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;if ($data2['selected']) {&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;echo &quot;&lt;option selected value=\&quot;&quot;.$data2[$idTarget].&quot;\&quot;>&quot;;&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;echo &quot;&lt;option value=\&quot;&quot;.$data2[$idTarget].&quot;\&quot;>&quot;;&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;$label = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;foreach($attributesA as $fieldName) {&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;$label .= &quot;($fieldName=&quot;.$data2[$fieldName].&quot;)&quot;;&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;if (strlen($label) > 85) {&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;$label = substr($label,0,82);&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;$label .= &quot;...&quot;;&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;echo &quot;$label\n&quot;;&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;?>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;input type=&quot;hidden&quot; name=&quot;&lt;?echo &quot;multiple__&quot;.$joinTable;?>&quot; value=&quot;&lt;?echo $manySource?>&quot;/>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/select>&#xA;"/>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator="==">
              <operands xsi:type="expressions:CallSet">
                <calls name="current" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                </calls>
                <calls name="table" prefix=""/>
              </operands>
              <operands xsi:type="expressions:CallSet">
                <calls name="cast" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
                </calls>
                <calls name="idLeft" prefix=""/>
                <calls name="eContainer" prefix=""/>
              </operands>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idRight" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="push" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&#xA;"/>
          <elseStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
          <elseStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="cast" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="ComponentRelationShip"/>
              </calls>
              <calls name="idLeft" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="push" prefix=""/>
            </expression>
          </elseStatements>
          <elseStatements xsi:type="statements:Text" value="&#xA;"/>
        </statements>
        <statements xsi:type="statements:If">
          <condition xsi:type="expressions:Parenthesis">
            <expression xsi:type="expressions:Operator" operator=">">
              <operands xsi:type="expressions:CallSet">
                <calls name="current" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="Component"/>
                </calls>
                <calls name="followingSibling" prefix="">
                  <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
                    <operands xsi:type="expressions:Operator" operator="==">
                      <operands xsi:type="expressions:CallSet">
                        <calls name="table" prefix=""/>
                      </operands>
                      <operands xsi:type="expressions:CallSet">
                        <calls name="peek" prefix=""/>
                      </operands>
                    </operands>
                    <operands xsi:type="expressions:CallSet">
                      <calls name="canCreate" prefix=""/>
                    </operands>
                  </filter>
                </calls>
                <calls name="nSize" prefix=""/>
              </operands>
              <operands xsi:type="expressions:IntegerLiteral"/>
            </expression>
          </condition>
          <thenStatements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;&lt;div class=&quot;createObject&quot;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;a href=&quot;edit_"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="peek" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="_"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="Component"/>
              </calls>
              <calls name="followingSibling" prefix="">
                <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
                  <operands xsi:type="expressions:Operator" operator="==">
                    <operands xsi:type="expressions:CallSet">
                      <calls name="table" prefix=""/>
                    </operands>
                    <operands xsi:type="expressions:CallSet">
                      <calls name="peek" prefix=""/>
                    </operands>
                  </operands>
                  <operands xsi:type="expressions:CallSet">
                    <calls name="canCreate" prefix=""/>
                  </operands>
                </filter>
              </calls>
              <calls name="nFirst" prefix=""/>
              <calls name="eContainer" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="?"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="peek" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="=1&quot;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Create a &lt;i>"/>
          <thenStatements xsi:type="statements:Feature">
            <expression xsi:type="expressions:CallSet">
              <calls name="current" prefix="">
                <arguments xsi:type="expressions:StringLiteral" value="Component"/>
              </calls>
              <calls name="followingSibling" prefix="">
                <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
                  <operands xsi:type="expressions:Operator" operator="==">
                    <operands xsi:type="expressions:CallSet">
                      <calls name="table" prefix=""/>
                    </operands>
                    <operands xsi:type="expressions:CallSet">
                      <calls name="peek" prefix=""/>
                    </operands>
                  </operands>
                  <operands xsi:type="expressions:CallSet">
                    <calls name="canCreate" prefix=""/>
                  </operands>
                </filter>
              </calls>
              <calls name="nFirst" prefix=""/>
              <calls name="name" prefix=""/>
            </expression>
          </thenStatements>
          <thenStatements xsi:type="statements:Text" value="&lt;/i>&lt;/a>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/div>&#xA;"/>
        </statements>
        <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&#x9;&#x9;"/>
        <statements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="pop" prefix=""/>
          </expression>
        </statements>
        <statements xsi:type="statements:Text" value="&#xA;&#x9;&#x9;&#x9;&#x9;&lt;/td>&lt;/tr>&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;&#x9;&#x9;&lt;/table>&#xA;&#x9;&#x9;&#x9;&lt;input type=&quot;hidden&quot; name=&quot;table_name&quot; value=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;/>&#xA;&#x9;&#x9;&#x9;&lt;input type=&quot;hidden&quot; name=&quot;table_fields&quot; value=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="properties" prefix="">
            <filter xsi:type="expressions:CallSet">
              <calls name="canUpdate" prefix=""/>
            </filter>
          </calls>
          <calls name="cast" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
          </calls>
          <calls name="field" prefix=""/>
          <calls name="name" prefix=""/>
          <calls name="sep" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value=";"/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;/>&#xA;&#x9;&#x9;&#x9;&lt;input type=&quot;hidden&quot; name=&quot;table_relationships&quot; value=&quot;&lt;? echo implode(';',$allJoinTable)?>&quot;/>&#xA;&#x9;&#x9;&#x9;&lt;input type=&quot;hidden&quot; name=&quot;idFieldName&quot; value=&quot;"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="primaryKey" prefix=""/>
          <calls name="nFirst" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;/>&#xA;&#x9;&#x9;&#x9;&lt;? if (isset($_GET[&quot;idObject&quot;])) {?>&#xA;&#x9;&#x9;&#x9;&#x9;&lt;input type=&quot;hidden&quot; name=&quot;updateObject&quot; value=&quot;&lt;? echo $data['"/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="primaryKey" prefix=""/>
          <calls name="nFirst" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="']?>&quot;/>&#xA;&#x9;&#x9;&#x9;&#x9;&lt;input type=&quot;submit&quot; value=&quot;Update&quot;/>&#xA;&#x9;&#x9;&#x9;&lt;? } else { ?>&#xA;&#x9;&#x9;&#x9;&#x9;&lt;input type=&quot;hidden&quot; name=&quot;createObject&quot; value=&quot;1&quot;/>&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;input type=&quot;submit&quot; value=&quot;Create&quot;/>&#xA;&#x9;&#x9;&#x9;&lt;? } ?>&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&lt;/form>&#xA;&#x9;&#x9;&lt;/div>&#xA;&#x9;&lt;? } ?>"/>
    </scripts>
    <scripts>
      <descriptor name="dataPage_component_sqlQueryUpdate" type="WebSite.Component" description=""/>
      <statements xsi:type="statements:Text" value="$idObject = $_GET[&quot;idObject&quot;];&#xA;$sql = &quot;SELECT &quot;&#xA;&#x9;.&quot; "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="properties" prefix="">
            <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
              <operands xsi:type="expressions:CallSet">
                <calls name="eClass" prefix=""/>
                <calls name="name" prefix=""/>
                <calls name="equalsIgnoreCase" prefix="">
                  <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
                </calls>
              </operands>
              <operands xsi:type="expressions:CallSet">
                <calls name="canUpdate" prefix=""/>
              </operands>
            </filter>
          </calls>
          <calls name="cast" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
          </calls>
          <calls name="field" prefix=""/>
          <calls name="name" prefix=""/>
          <calls name="sep" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value=","/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;"/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator=">">
            <operands xsi:type="expressions:CallSet">
              <calls name="properties" prefix="">
                <filter xsi:type="expressions:Operator" operator="&amp;&amp;">
                  <operands xsi:type="expressions:CallSet">
                    <calls name="eClass" prefix=""/>
                    <calls name="name" prefix=""/>
                    <calls name="equalsIgnoreCase" prefix="">
                      <arguments xsi:type="expressions:StringLiteral" value="ComponentAttribute"/>
                    </calls>
                  </operands>
                  <operands xsi:type="expressions:CallSet">
                    <calls name="canUpdate" prefix=""/>
                  </operands>
                </filter>
              </calls>
              <calls name="nSize" prefix=""/>
            </operands>
            <operands xsi:type="expressions:IntegerLiteral"/>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Text" value="&#x9;.&quot;,&quot;&#xA;"/>
      </statements>
      <statements xsi:type="statements:Text" value="&#x9;.&quot; "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="primaryKey" prefix=""/>
          <calls name="name" prefix=""/>
          <calls name="split" prefix="">
            <arguments xsi:type="expressions:StringLiteral" value=","/>
          </calls>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;    .&quot; FROM "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="&quot;&#xA;&#x9;.&quot; WHERE "/>
      <statements xsi:type="statements:Feature">
        <expression xsi:type="expressions:CallSet">
          <calls name="table" prefix=""/>
          <calls name="primaryKey" prefix=""/>
          <calls name="nFirst" prefix=""/>
          <calls name="name" prefix=""/>
        </expression>
      </statements>
      <statements xsi:type="statements:Text" value="=$idObject;&quot;;"/>
    </scripts>
    <scripts>
      <descriptor name="dataPage_component_update_namefile" type="WebSite.Component" description=""/>
      <statements xsi:type="statements:If">
        <condition xsi:type="expressions:Parenthesis">
          <expression xsi:type="expressions:Operator" operator="||">
            <operands xsi:type="expressions:Parenthesis">
              <expression xsi:type="expressions:CallSet">
                <calls name="canCreate" prefix=""/>
              </expression>
            </operands>
            <operands xsi:type="expressions:Parenthesis">
              <expression xsi:type="expressions:CallSet">
                <calls name="canUpdate" prefix=""/>
              </expression>
            </operands>
          </expression>
        </condition>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="eContainer" prefix=""/>
            <calls name="eContainer" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="/edit_"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="table" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
        <thenStatements xsi:type="statements:Text" value="_"/>
        <thenStatements xsi:type="statements:Feature">
          <expression xsi:type="expressions:CallSet">
            <calls name="eContainer" prefix=""/>
            <calls name="name" prefix=""/>
          </expression>
        </thenStatements>
      </statements>
    </scripts>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.StringServices">
    <methods name="length" return="int"/>
    <methods name="charAt" return="java.lang.String">
      <parameters type="int"/>
    </methods>
    <methods name="indexOf" return="int">
      <parameters type="java.lang.String"/>
      <parameters type="int"/>
    </methods>
    <methods name="indexOf" return="int">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="equalsIgnoreCase" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="startsWith" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="endsWith" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="lastIndexOf" return="int">
      <parameters type="java.lang.String"/>
      <parameters type="int"/>
    </methods>
    <methods name="lastIndexOf" return="int">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="substring" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
      <parameters type="int"/>
    </methods>
    <methods name="substring" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
    </methods>
    <methods name="matches" return="boolean">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="replaceFirst" return="java.lang.String">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="replaceAll" return="java.lang.String">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="split" return="java.util.List">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="toLowerCase" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toUpperCase" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="trim" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toU1Case" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="toL1Case" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="indentSpace" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="indentTab" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.EObjectServices">
    <methods name="load" return="org.eclipse.emf.ecore.EObject">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getRootContainer" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eClass" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eContents" return="org.eclipse.emf.common.util.EList"/>
    <methods name="eResource" return="java.lang.String"/>
    <methods name="eContainer" return="org.eclipse.emf.ecore.EObject">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="eContainer" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="eContainingFeature" return="org.eclipse.emf.ecore.EStructuralFeature"/>
    <methods name="eContainmentFeature" return="org.eclipse.emf.ecore.EReference"/>
    <methods name="eAllContents" return="fr.obeo.acceleo.gen.template.eval.ENodeList">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="eAllContents" return="fr.obeo.acceleo.gen.template.eval.ENodeList"/>
    <methods name="eCrossReferences" return="java.util.List"/>
    <methods name="eResourceName" return="java.lang.String"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.XpathServices">
    <methods name="parent" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="child" return="java.util.List"/>
    <methods name="self" return="org.eclipse.emf.ecore.EObject"/>
    <methods name="ancestor" return="java.util.List"/>
    <methods name="following" return="java.util.List"/>
    <methods name="preceding" return="java.util.List"/>
    <methods name="descendant" return="java.util.List"/>
    <methods name="precedingSibling" return="java.util.List"/>
    <methods name="followingSibling" return="java.util.List"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ResourceServices">
    <methods name="getFileContent" return="java.lang.String">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ContextServices">
    <methods name="get" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="put" return="void">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="push" return="void"/>
    <methods name="pop" return="void"/>
    <methods name="peek" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="nPut" return="void">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nPush" return="void"/>
    <methods name="nPop" return="void"/>
    <methods name="nPeek" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.ENodeServices">
    <methods name="toString" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="cast" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="debug" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="reverse" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sort" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sort" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="current" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="current" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="filter" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="adapt" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nSize" return="int"/>
    <methods name="sep" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="trace" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="trace" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="minimize" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="sepStr" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="until" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
    </methods>
    <methods name="nGet" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="int"/>
      <parameters type="int"/>
    </methods>
    <methods name="nFirst" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nLast" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nSort" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nSort" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="nMinimize" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nReverse" return="fr.obeo.acceleo.gen.template.eval.ENode"/>
    <methods name="nContains" return="boolean">
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.RequestServices">
    <methods name="delete" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="delete" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="select" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="select" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="fr.obeo.acceleo.gen.template.eval.ENode"/>
    </methods>
    <methods name="evaluate" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Service" name="fr.obeo.acceleo.gen.template.scripts.imports.services.PropertiesServices">
    <methods name="getProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
      <parameters type="java.lang.String"/>
    </methods>
    <methods name="getBestProperty" return="fr.obeo.acceleo.gen.template.eval.ENode">
      <parameters type="java.lang.String"/>
    </methods>
  </resources>
  <resources xsi:type="core:Metamodel" name="http://www.bluexml.com/rwm/website/1.0/"/>
</template:ResourceSet>
