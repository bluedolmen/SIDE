/*******************************************************************************
 * 
 ******************************************************************************/
package com.bluexml.side.Class.modeler.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.ILabelFeatureProvider;

import com.bluexml.side.clazz.util.ClazzAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class ClazzModelerProviderAdapterFactory extends ClazzAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * 
	 * @generated
	 */
	private ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * 
	 * @generated
	 */
	private IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * 
	 * @generated
	 */
	private Collection supportedTypes = new ArrayList();

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.ClassModelElement} instances.
	 * 
	 * @generated
	 */
	private ClassModelElementModelerProvider classmodelelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.ClassPackage} instances.
	 * 
	 * @generated
	 */
	private ClassPackageModelerProvider classpackageModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.Clazz} instances.
	 * 
	 * @generated
	 */
	private ClazzModelerProvider clazzModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.Association} instances.
	 * 
	 * @generated
	 */
	private AssociationModelerProvider associationModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.Attribute} instances.
	 * 
	 * @generated
	 */
	private AttributeModelerProvider attributeModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.Enumeration} instances.
	 * 
	 * @generated
	 */
	private EnumerationModelerProvider enumerationModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.EnumerationLiteral} instances.
	 * 
	 * @generated
	 */
	private EnumerationLiteralModelerProvider enumerationliteralModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.Aspect} instances.
	 * 
	 * @generated
	 */
	private AspectModelerProvider aspectModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.AbstractClass} instances.
	 * 
	 * @generated
	 */
	private AbstractClassModelerProvider abstractclassModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.TitledNamedClassModelElement} instances.
	 * 
	 * @generated
	 */
	private TitledNamedClassModelElementModelerProvider titlednamedclassmodelelementModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.ClassComment} instances.
	 * 
	 * @generated
	 */
	private ClassCommentModelerProvider classcommentModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.AssociationEnd} instances.
	 * 
	 * @generated
	 */
	private AssociationEndModelerProvider associationendModelerProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.bluexml.side.clazz.Model} instances.
	 * 
	 * @generated
	 */
	private ModelModelerProvider modelModelerProvider;

	/**
	 * This constructs an instance.
	 * 
	 * @generated
	 */
	public ClazzModelerProviderAdapterFactory() {
		supportedTypes.add(ILabelFeatureProvider.class);
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 *
	 * @return the root AdapterFactory
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 *
	 * @param parentAdapterFactory the new parent adapter factory
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * @param type the type to test
	 * @return true if supported
	 * 
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 *
	 * @param notifier the notifier
	 * @param type the object to adapt
	 * @return the Adapter the created adatper
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * @param object the object to adapt
	 * @param type the type to adapt
	 * @return the adapted Object
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 *
	 * @param notifyChangedListener the listener to add
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 *
	 * @param notifyChangedListener the listener to remove
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 *
	 * @param notification the notification to fire
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.ClassModelElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createClassModelElementAdapter() {
		if (classmodelelementModelerProvider == null) {
			classmodelelementModelerProvider = new ClassModelElementModelerProvider(
					this);
		}

		return classmodelelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.ClassPackage}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createClassPackageAdapter() {
		if (classpackageModelerProvider == null) {
			classpackageModelerProvider = new ClassPackageModelerProvider(this);
		}

		return classpackageModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.Clazz}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createClazzAdapter() {
		if (clazzModelerProvider == null) {
			clazzModelerProvider = new ClazzModelerProvider(this);
		}

		return clazzModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.Association}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAssociationAdapter() {
		if (associationModelerProvider == null) {
			associationModelerProvider = new AssociationModelerProvider(this);
		}

		return associationModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.Attribute}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAttributeAdapter() {
		if (attributeModelerProvider == null) {
			attributeModelerProvider = new AttributeModelerProvider(this);
		}

		return attributeModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.Enumeration}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEnumerationAdapter() {
		if (enumerationModelerProvider == null) {
			enumerationModelerProvider = new EnumerationModelerProvider(this);
		}

		return enumerationModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.EnumerationLiteral}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createEnumerationLiteralAdapter() {
		if (enumerationliteralModelerProvider == null) {
			enumerationliteralModelerProvider = new EnumerationLiteralModelerProvider(
					this);
		}

		return enumerationliteralModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.Aspect}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAspectAdapter() {
		if (aspectModelerProvider == null) {
			aspectModelerProvider = new AspectModelerProvider(this);
		}

		return aspectModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.AbstractClass}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAbstractClassAdapter() {
		if (abstractclassModelerProvider == null) {
			abstractclassModelerProvider = new AbstractClassModelerProvider(
					this);
		}

		return abstractclassModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.TitledNamedClassModelElement}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createTitledNamedClassModelElementAdapter() {
		if (titlednamedclassmodelelementModelerProvider == null) {
			titlednamedclassmodelelementModelerProvider = new TitledNamedClassModelElementModelerProvider(
					this);
		}

		return titlednamedclassmodelelementModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.ClassComment}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createClassCommentAdapter() {
		if (classcommentModelerProvider == null) {
			classcommentModelerProvider = new ClassCommentModelerProvider(this);
		}

		return classcommentModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.AssociationEnd}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createAssociationEndAdapter() {
		if (associationendModelerProvider == null) {
			associationendModelerProvider = new AssociationEndModelerProvider(
					this);
		}

		return associationendModelerProvider;
	}

	/**
	 * This creates an adapter for a {@link com.bluexml.side.clazz.Model}.
	 *
	 * @return the Adapter
	 * @generated
	 */
	public Adapter createModelAdapter() {
		if (modelModelerProvider == null) {
			modelModelerProvider = new ModelModelerProvider(this);
		}

		return modelModelerProvider;
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * 
	 * @generated
	 */
	public void dispose() {
		if (classmodelelementModelerProvider != null) {
			classmodelelementModelerProvider.dispose();
		}
		if (classpackageModelerProvider != null) {
			classpackageModelerProvider.dispose();
		}
		if (clazzModelerProvider != null) {
			clazzModelerProvider.dispose();
		}
		if (associationModelerProvider != null) {
			associationModelerProvider.dispose();
		}
		if (attributeModelerProvider != null) {
			attributeModelerProvider.dispose();
		}
		if (enumerationModelerProvider != null) {
			enumerationModelerProvider.dispose();
		}
		if (enumerationliteralModelerProvider != null) {
			enumerationliteralModelerProvider.dispose();
		}
		if (aspectModelerProvider != null) {
			aspectModelerProvider.dispose();
		}
		if (abstractclassModelerProvider != null) {
			abstractclassModelerProvider.dispose();
		}
		if (titlednamedclassmodelelementModelerProvider != null) {
			titlednamedclassmodelelementModelerProvider.dispose();
		}
		if (classcommentModelerProvider != null) {
			classcommentModelerProvider.dispose();
		}
		if (associationendModelerProvider != null) {
			associationendModelerProvider.dispose();
		}
		if (modelModelerProvider != null) {
			modelModelerProvider.dispose();
		}
	}

}
