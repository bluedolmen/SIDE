<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     ${velocity_currentDate}                                    

     ${velocity_projectName} builder    
     project to build zip contening all needs
                   
     generated build file by SIDE
     ====================================================================== -->
<project name="${velocity_projectName}" default="applyConfig">
	<description>
	            Project to build the final package (zip contening all the customizations of the application).
				This build requires that :
				- the SIDE applicaion build.xml has been previously generated using the SIDE command 'Generate Ant build file' on the application model.
		
				Parameters to set up in build.username.properties are:
					'original.war.ext'  to indicate the extension of the original wars (Ex: 'org' -> alfresco.war.org, ...)
					'tomcat.webapps.target' to indicate the paht of the webapps directory (Ex: 'webapps' -> alfresco_home/tomcat/webapps)
					'config' to indicate the name of the configuration folder to use under src/configs: the files under this folder will override the files of the project at the end of the build (Ex: rbaudu -> src/configs/rbaudu)
					'side.configuration' to indicate the SIDE application configuration to use: this configuration is one of the configuration defined in the application model to generate and deploy SIDE models
					'tomcat.home' to indicate the absolute path to the tomcat directory of the Alfresco instance (must be the same value than the tomcat.home defined in the deploy part of the selected SIDE configuration)
					'shared_configConf.disable' if set to a value, the commonConf config is not taken into account in the build and its content will not override the built files at the end of the build
	</description>
	<property file="${user.home}/build.properties" />
	<property file="build.${user.name}.properties" />
	<eclipse.convertPath resourcepath="/${velocity_projectName}/src/models/application/build.xml" property="applicationBuildFile" />

	<available property="applicationBuildFileExist" type="file" file="${applicationBuildFile}" />
	<property name="configurationName" value="${side.configuration}" />

	<import file="${applicationBuildFile}" optional="true" />

	<!-- properties -->
	<tstamp>
		<format property="NOW_FR" pattern="yyyy-MM-dd_HH-mm" locale="fr,FR" />
	</tstamp>

	<!-- project information -->
	<property name="moduleId" value="${ant.project.name}" />
	<property name="version.build" value="1.0" />

	<!-- file and directory paths -->
	<property name="buildName" value="${ant.project.name}_${version.build}" />
	<property name="buildPath" value="${basedir}/build/${buildName}" />
	<property name="tomcatPatch" value="${buildPath}-[${config}]_${NOW_FR}.zip" />
	<property name="configPath" value="${basedir}/src/configs/${config}" />
	<property name="commonConfigPath" value="${basedir}/src/configs/commonConf" />
	<property name="modulesHome" value="${basedir}/src/modules" />
	<property name="projectHome" value="${modulesHome}/mavenProjects" />
	<property name="alfrescoModules" value="${buildPath}/alfrescoModules" />
	<property name="shareModules" value="${buildPath}/shareModules" />

	<!-- read configuration to extract tomcat location -->
	<!-- does not work as variable application does not seem to be set up when importing the applicationBuildFile
		=> set tomcat.home in build.xxx.properties
	<side.setPropertyFromConfiguration antproperty="tomcat.home" applicationfile="${application}" configurationname="${configurationName}" parameterid="CATALINA_HOME" />
	-->

	<!-- - - - - - - - - - - - - - - - - - 
          target: check-properties                      
         - - - - - - - - - - - - - - - - - -->
	<target name="check-properties" depends="check-property-maven.home, warnForSIDEAntBuildFile">
		<condition property="${velocity_projectName}.fail">
			<or>
				<not>
					<isset property="tomcat.home" />
				</not>
				<not>
					<isset property="applicationBuildFileExist" />
				</not>
			</or>
		</condition>
		<fail if="${velocity_projectName}.fail" message="see previous Error" />
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: check-property-maven.home                      
         - - - - - - - - - - - - - - - - - -->
	<target name="check-property-maven.home" unless="maven.home">
		<echo message="maven.home not set maven build skipped" level="warning" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: warnForSIDEAntBuildFile                      
         - - - - - - - - - - - - - - - - - -->
	<target name="warnForSIDEAntBuildFile" unless="applicationBuildFileExist">
		<echo message="SIDE PROCESS SKIPED" level="error" />
		<echo message=" PLEASE TO GENERATE Ant Build File from application model" level="error" />
	</target>

	<!-- ================================= 
          target: applyConfig              
         ================================= -->
	<target name="applyConfig" depends="check-properties,patchWars" description="apply configuration to build deployment archive">
		<mkdir dir="${commonConfigPath}" />

		<copy file="${tomcat.home}/${tomcat.webapps.target}/alfresco.war" tofile="${buildPath}/alfresco.war" failonerror="false" />
		<copy file="${tomcat.home}/${tomcat.webapps.target}/share.war" tofile="${buildPath}/share.war" failonerror="false" />

		<!-- make final tomcat patch -->
		<zip destfile="${tomcatPatch}" comment="Build date: ${NOW_FR} \nunzip in tomcat home directory, delete alfresco and shared explosed webapps">
			<zipfileset dir="${configPath}">
				<exclude name="webapps/**" />
			</zipfileset>
			<zipfileset dir="${commonConfigPath}">
				<exclude name="**" if="shared_configConf.disable" />
				<exclude name="webapps/**" />
			</zipfileset>
			<zipfileset dir="${buildPath}" prefix="${tomcat.webapps.target}">
				<include name="*.war" />
			</zipfileset>
			<zipfileset file="${basedir}/src/README.txt" />
		</zip>
	</target>

	<!-- ================================= 
          target: cleanAllBuilds              
         ================================= -->
	<target name="cleanAllBuilds" depends="" description="delete build directory">
		<delete dir="${basedir}/build" quiet="true" />
	</target>

	<!-- ================================= 
          target: buildAll              
         ================================= -->
	<target name="buildAll" depends="clean, build" description="project to build zip contening all needs">
		<antcall target="side-generate" />
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: clean                      
         - - - - - - - - - - - - - - - - - -->
	<target name="clean">
		<delete dir="${buildPath}" verbose="true" />
		<delete file="${buildPath}.zip" failonerror="true" />
		<delete dir="${basedir}/build" />
		<antcall target="maven-clean" />
		<eclipse.incrementalBuild kind="clean" />
		<antcall target="side-clean" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: build                      
         - - - - - - - - - - - - - - - - - -->
	<target name="build">
		<antcall target="maven-install" />
		<eclipse.incrementalBuild kind="full" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	      target: side-clean                      
	     - - - - - - - - - - - - - - - - - -->
	<target name="side-clean" if="applicationBuildFileExist">
		<antcall target="${configurationName}-clean" />
	</target>
	<!-- - - - - - - - - - - - - - - - - - 
          target: side-generate                      
         - - - - - - - - - - - - - - - - - -->
	<target name="side-generate" if="applicationBuildFileExist">
		<antcall target="${configurationName}-generate" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: side-deploy                      
         - - - - - - - - - - - - - - - - - -->
	<target name="side-deploy" if="applicationBuildFileExist">
		<antcall target="${configurationName}-deploy" />
	</target>

	<!-- ================================= 
          target: patchWars              
         ================================= -->
	<target name="patchWars" depends="buildAll">
		<!-- Beware deployer must to patch war file not exploded directory or set isDirectDeployer property -->
		<antcall target="side-deploy" />
		<antcall target="unpackWars" />
		<antcall target="makeWarsWithConfig" />
		<eclipse.refreshLocal resource="${ant.project.name}" depth="infinite" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: unpackWars                      
         - - - - - - - - - - - - - - - - - -->
	<target name="unpackWars" unless="isDirectDeployer">
		<delete dir="${tomcat.home}/${tomcat.webapps.target}/alfresco" verbose="true" quiet="true" />
		<delete dir="${tomcat.home}/${tomcat.webapps.target}/share" verbose="true" quiet="true" />
		<!-- unzip shared, and webapps -->
		<unzip dest="${tomcat.home}/${tomcat.webapps.target}/alfresco" src="${tomcat.home}/${tomcat.webapps.target}/alfresco.war" overwrite="true" />
		<unzip dest="${tomcat.home}/${tomcat.webapps.target}/share" src="${tomcat.home}/${tomcat.webapps.target}/share.war" overwrite="true" />
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
	      target: makeWarsWithConfig package webapps with configuration
         - - - - - - - - - - - - - - - - - -->
	<target name="makeWarsWithConfig" description="copy configurations and package webapps">
		<applyConfig2ExplodedWar webappname="alfresco" />
		<applyConfig2ExplodedWar webappname="share" />
		<antcall target="makeWarsFromExplodedWar" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: makeWarsFromExplodedWar, package webapps
         - - - - - - - - - - - - - - - - - -->
	<target name="makeWarsFromExplodedWar">
		<zip destfile="${tomcat.home}/${tomcat.webapps.target}/alfresco.war" update="false" whenempty="skip">
			<zipfileset dir="${tomcat.home}/${tomcat.webapps.target}/alfresco">
				<include name="**" />
			</zipfileset>
		</zip>
		<zip destfile="${tomcat.home}/${tomcat.webapps.target}/share.war" update="false" whenempty="skip">
			<zipfileset dir="${tomcat.home}/${tomcat.webapps.target}/share">
				<include name="**" />
			</zipfileset>
		</zip>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: cleanShared                      
         - - - - - - - - - - - - - - - - - -->
	<target name="cleanShared">
		<!-- create shared backup -->
		<property name="shared.org" value="shared.org" />
		<available property="shared.bk" type="dir" file="${tomcat.home}/${shared.org}">

		</available>
		<!-- make a backup of tomcat shared folder -->
		<copy todir="${tomcat.home}/${shared.org}">
			<fileset dir="${tomcat.home}/shared">
				<include name="**/**" unless="shared.bk" />
			</fileset>
		</copy>

		<!-- restore from backup-->
		<delete dir="${tomcat.home}/shared" />
		<copy todir="${tomcat.home}/shared" verbose="true">
			<fileset dir="${tomcat.home}/${shared.org}">
				<include name="**/**" />
			</fileset>
		</copy>
	</target>

	<!-- ================================= 
          target: install              
         ================================= -->
	<target name="install" depends="applyConfig, cleanShared" description="install project package including wars and configuration files in tomcat">
		<delete verbose="true">
			<fileset dir="${tomcat.home}/webapps">
				<include name="alfresco.war" />
				<include name="share.war" />
			</fileset>
		</delete>
		<delete dir="${tomcat.home}/${tomcat.webapps.target}/alfresco" verbose="true" quiet="true" />
		<delete dir="${tomcat.home}/${tomcat.webapps.target}/share" verbose="true" quiet="true" />
		<!-- unzip shared, and webapps -->
		<unzip dest="${tomcat.home}" src="${tomcatPatch}" overwrite="true" />
	</target>

	<!-- ================================= 
          target: installConfig           
         ================================= -->
	<target name="installConfig" depends="cleanShared" description="to install uniquely the current config including commonConf">
		<echo message="Copy the current config including commonConf" level="info" />		
		<!-- copy tomcat shared from common and user configuration -->
		<copy todir="${tomcat.home}/shared" failonerror="false" overwrite="true" verbose="true">
			<fileset dir="${commonConfigPath}/shared">
				<include name="**" />
			</fileset>
			<fileset dir="${configPath}/shared">
				<include name="**" />
			</fileset>
		</copy>
		<!-- copy files into webapps (alfresco and share) -->
		<applyConfig2ExplodedWar webappname="alfresco" />
		<applyConfig2ExplodedWar webappname="share" />
	</target>


	<!-- Task that need maven2 -->


	<!-- - - - - - - - - - - - - - - - - - 
          target: maven-install                      
         - - - - - - - - - - - - - - - - - -->
	<target name="maven-install" if="maven.home">
		<maven basedir="${projectHome}" options="" goal="install" resultproperty="maven.build.result" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: maven-clean                      
         - - - - - - - - - - - - - - - - - -->
	<target name="maven-clean" if="maven.home">
		<maven basedir="${projectHome}" options="" goal="clean" resultproperty="maven.build.result" />
	</target>

	<!-- ========
			this macro call maven installed on your system, so maven.home must be set
		 ======== -->
	<macrodef name="maven">
		<attribute name="options" default="" />
		<attribute name="goal" />
		<attribute name="basedir" />
		<attribute name="resultproperty" default="maven.result" />
		<element name="args" implicit="true" optional="true" />
		<sequential>
			<java classname="org.codehaus.classworlds.Launcher" fork="true" dir="@{basedir}" resultproperty="@{resultproperty}">
				<jvmarg value="-Xmx512m" />
				<classpath>
					<fileset dir="${maven.home}/boot">
						<include name="*.jar" />
					</fileset>
					<fileset dir="${maven.home}/lib">
						<include name="*.jar" />
					</fileset>
				</classpath>
				<sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
				<sysproperty key="maven.home" value="${maven.home}" />
				<arg line="--batch-mode @{options} @{goal}" />
			</java>
			<echo message="exit code : ${maven.build.result}" />
		</sequential>
	</macrodef>

	<!-- ================================= 
	         applyConfig2ExplodedWar
	         This macro copy configurations files into the given webapp
	     ================================= -->
	<macrodef name="applyConfig2ExplodedWar" description="copy configurations files into war">
		<attribute name="webappName" />
		<sequential>
			<echo message="applyConfig2ExplodedWar config ${config} into @{webappName}" />
			<copy todir="${tomcat.home}/${tomcat.webapps.target}/@{webappName}" failonerror="false" verbose="true" overwrite="true">
				<fileset dir="${commonConfigPath}/${tomcat.webapps.target}/@{webappName}">
					<include name="**" />
				</fileset>
				<fileset dir="${configPath}/${tomcat.webapps.target}/@{webappName}">
					<include name="**" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>
</project>
