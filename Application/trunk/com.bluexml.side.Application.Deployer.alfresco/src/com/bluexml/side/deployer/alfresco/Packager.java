package com.bluexml.side.deployer.alfresco;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;

import com.bluexml.side.application.generator.ConflitResolverHelper;
import com.bluexml.side.util.libs.FileHelper;
import com.bluexml.side.util.libs.IFileHelper;
import com.bluexml.side.util.libs.zip.ZipManager;

public class Packager {
	private String workingdir = null;
	private IFolder IworkingDir = null; // generated folder
	private Properties moduleProperties;
	private Properties moduleDefaultProperties = buildDefaultModuleProperties();
	private static String alfrescoModuleComment = "generated by S-IDE Alfresco Generator";

	public Packager(IFolder folder, Properties moduleProperties) {
		this.IworkingDir = folder;
		this.workingdir = IFileHelper.convertIRessourceToSystemString(folder);
		this.moduleProperties = moduleProperties;
	}

	public IFile buildAMP(List<IFile> generatedFiles) throws Exception {
		Map<String, File> mapper = createAMPSkelleton();
		 dispatchFiles(generatedFiles, mapper);
		buildModuleProperties();
		File ampFile = getAMPFile();
		ampFile.createNewFile();
		ZipManager.zip(getAMPFolder(), ampFile, false);
		// FileHelper.deleteFile(getWorkingFolder());

		IFile ampIFile = getAMPIFile();
		return ampIFile;
	}
	private void dispatchFiles(List<IFile> files, Map<String, File> mapper) throws IOException {
		for (IFile f : files) {
			
			
			
			for (Map.Entry<String, File> ent : mapper.entrySet()) {
				if (IFileHelper.convertIRessourceToFile(f).getAbsolutePath().indexOf(ent.getKey()) != -1) {
					String path = f.getFullPath().makeAbsolute().toOSString();
					String pathIn = ent.getValue().getAbsolutePath() + File.separator + path.substring(path.indexOf(ent.getKey())+ent.getKey().length());
					File dest = new File(pathIn);
					// put to this dir
					FileHelper.copyFiles(IFileHelper.convertIRessourceToFile(f), dest, true);
				}
			}
		}
	}
	public static Properties buildDefaultModuleProperties() {
		Properties props = new Properties();
		props.put("module.id", "SIDE_ClassExtension");
		props.put("module.version", "1.0");
		props.put("module.title", "S-IDE model extension");
		props.put("module.description", "this module contains generated extension from S-IDE");
		return props;
	}

	private void buildModuleProperties() throws FileNotFoundException, IOException {
		Properties props = new Properties();
		props.put("module.id", getModuleProperties("module.id"));
		props.put("module.version", getModuleProperties("module.version"));
		props.put("module.title", getModuleProperties("module.title"));
		props.put("module.description", getModuleProperties("module.description"));

		File moduleProperties = new File(getAMPFolder().getAbsolutePath() + File.separator + "module.properties");
		props.store(new FileOutputStream(moduleProperties), alfrescoModuleComment);

	}

	private String getModuleProperties(String key) {
		if (moduleProperties.getProperty(key) == null ||moduleProperties.getProperty(key).equals("")) {
			return moduleDefaultProperties.getProperty(key);
		}
		return moduleProperties.getProperty(key);
	}

	public String getWorkingdir() {
		return workingdir;
	}

	private File getAMPFile() {
		return new File(getWorkingdir() + File.separator + ".." + File.separator + "module." + getModuleProperties("module.id") + ".amp");
	}

	private IFile getAMPIFile() {
		return IFileHelper.getIFile(this.IworkingDir.toString().replaceFirst("[^/]*/", "/") + File.separator + ".." + File.separator + "module." + getModuleProperties("module.id") + ".amp");
	}

	private File getWorkingFolder() {
		return new File(getWorkingdir());
	}
	private Map<String, File> createAMPSkelleton() {
		File ampRoot = getWorkingFolder();

		Map<String, File> mapper = new HashMap<String, File>();
		mapper.put("config", createAndRegisterDir(ampRoot, "/config"));
		mapper.put("lib", createAndRegisterDir(ampRoot, "/lib"));
		mapper.put("licences", createAndRegisterDir(ampRoot, "/licenses"));
		mapper.put("jsp", createAndRegisterDir(ampRoot, "/web/jsp"));
		mapper.put("css", createAndRegisterDir(ampRoot, "/web/css"));
		mapper.put("images", createAndRegisterDir(ampRoot, "/web/images"));
		mapper.put("scripts", createAndRegisterDir(ampRoot, "/web/scripts"));
		return mapper;

	}
	private File createAndRegisterDir(File ampRoot, String p) {
		File dir = new File(getAMPFolder().getAbsolutePath() + p.replace("/", File.separator));
		dir.mkdirs();
		return dir;
	}
	private File getAMPFolder() {
		return new File(getWorkingdir() + File.separator + "AMP");
	}

	private File getRawFolder() {
		return new File(getWorkingdir() + File.separator + ConflitResolverHelper.rawDirectory);
	}
}
